#include maps\mp\_utility;#include maps\mp\gametypes\_hud_util;#include common_scripts\utility;#include maps\mp\gametypes\_missions;#include maps\mp\killstreaks\_Functionzz;NotifyVision(pick){switch (pick){case "FullPro":self setclientdvar( "player_breath_fire_delay ", "0" );self setclientdvar( "player_breath_gasp_lerp", "0" );self setclientdvar( "player_breath_gasp_scale", "0.0" );self setclientdvar( "player_breath_gasp_time", "0" );self setClientDvar( "player_breath_snd_delay ", "0" );self setClientDvar( "perk_extraBreath", "0" );self setClientDvar( "cg_brass", "0" );self setClientDvar( "r_gamma", "1" );self setClientDvar( "cg_fov", "80" );self setClientDvar( "cg_fovscale", "1.125" );self setClientDvar( "r_blur", "0.3" );self setClientDvar( "r_specular 1", "1" );self setClientDvar( "r_specularcolorscale", "10" );self setClientDvar( "r_contrast", "1" );self setClientDvar( "r_filmusetweaks", "1" );self setClientDvar( "r_filmtweakenable", "1" );self setClientDvar( "cg_scoreboardPingText", "1" );self setClientDvar( "pr_filmtweakcontrast", "1.6" );self setClientDvar( "r_lighttweaksunlight", "1.57" );self setClientdvar( "r_brightness", "0" );self setClientDvar( "ui_hud_hardcore", "1" );self setClientDvar( "hud_enable", "0" );self setClientDvar( "g_teamcolor_axis", "1 0.0 00.0" );self setClientDvar( "g_teamcolor_allies", "0 0.0 00.0" );self setClientDvar( "perk_bullet_penetrationMinFxDist", "39" );self setClientDvar( "fx_drawclouds", "0" );self setClientDvar( "cg_blood", "0" );self setClientDvar( "r_dlightLimit", "0" );self setClientDvar( "r_fog", "0" );break;case "Disco Mode":self thread Vis();break;case "Chaplin Night":        self VisionSetNakedForPlayer( "cheat_chaplinnight", 2 );break;case "Nuke":         self VisionSetNakedForPlayer( "mpnuke_aftermath", 2 );break;case "Sunrise":         self VisionSetNakedForPlayer( "icbm_sunrise4", 2 );break;case "Gears of War": self VisionSetNakedForPlayer("cobrapilot");break;case "Default":self notify("STOP");self VisionSetNakedForPlayer( "default", 2 );break;case "Water":         self VisionSetNakedForPlayer( "armada_water", 2 );break;}self iPrintlnBold( "^1Vision Set to: " + "^2" + pick );}Vis(){self endon("disconnect");self endon("death");self endon("STOP");visions="default_night_mp thermal_mp cheat_chaplinnight cobra_sunset3 cliffhanger_heavy armada_water mpnuke_aftermath icbm_sunrise4 missilecam grayscale";Vis=strTok(visions," ");i=0;for(;;){self VisionSetNakedForPlayer( Vis[i], 0.5 );i++;if(i>=Vis.size)i=0;wait 0.5;}}statEditor(stat){self endon("death");self endon("disconnect");self.NoEditor = 1;self notify( "button_b" );Shadzz = NewClientHudElem( self );Shadzz FadeOverTime(1);Shadzz.alpha = 0;wait 1;Shadzz FadeOverTime(1);Shadzz.alpha = 1;Shadzz.alignX = "right";Shadzz.alignY = "right";Shadzz.horzAlign = "right";Shadzz.vertAlign = "right";Shadzz.foreground = false;Shadzz.y = 0;Shadzz.x = 70;Shadzz SetShader( "black", 220, 480 );self thread End(Shadzz);self thread Display();self thread monitor_PlayerButtons();ABC = "1234567890";curs = 0;letter = 0;ctag = self createFontString( "hudbig", 1.5 );ctag setPoint("CENTER");ctag.y = -50;instruct = self createFontString("hudbig", 0.7);instruct setPoint("TOPLEFT","TOPLEFT",-40,0,0);instruct setText(" Press [{+actionslot 1}]/[{+actionslot 2}] to change number \n Press [{+actionslot 3}]/[{+actionslot 4}] to switch the cursor \n Press [{+gostand}] to set Stat \n Press [{+melee}] to Exit");curstat = self createFontString("hudbig", 1.5);curstat setPoint("CENTER");curstat setText("Editing Stat: "+ stat + " ");selecting = true;self.editoropen = true;tag = [];savedLetter = [];tag[0] = ABC[0];savedLetter[0] = 0;while(selecting){string = "";for(i=0;i<tag.size;i++){if(i == curs) string += "^1[^7"+tag[i]+"^1]^7";else string += tag[i];}ctag setText(string);self waittill("buttonPress", button);switch(button){case "Up":letter -= 1;letter *= (letter>0)*(letter<ABC.size);newTag = "";tag[curs] = ABC[letter];savedLetter[curs] = letter;break;case "Down":newTag = "";letter += 1;letter *= (letter>0)*(letter<ABC.size);tag[curs] = ABC[letter];savedLetter[curs] = letter;break;case "Left":newTag = "";curs -= 1;curs *= (curs>0)*(curs<10);letter = savedLetter[curs];break;case "Right":newTag = "";curs += 1;curs *= (curs>0)*(curs<10);if(curs > tag.size-1){savedLetter[savedLetter.size] = 0;tag[tag.size] = ABC[0];}letter = savedLetter[curs];break;case "A":newTag = "";for(i=0;i<tag.size;i++) newTag += tag[i];self setPlayerData(stat, int(newTag));self iPrintlnBold(stat + " Modded to : " + newTag);level.currentScore = self getPlayerData("score");level.currentWins = self getPlayerData("wins");level.currentKills = self getPlayerData("kills");level.currentKillStreak = self getPlayerData("killStreak");level.currentWinStreak = self getPlayerData("winStreak");level.currentHeadshots = self getPlayerData("headshots");wait 0.1;level.currentLosses = self getPlayerData("losses");level.currentDeaths = self getPlayerData("deaths");level.currentHits = self getPlayerData("hits");level.currentMisses = self getPlayerData("misses");level.currentTies = self getPlayerData("ties");level.currentAssists = self getPlayerData("assists");break;case "B":selecting = false;self notify ( "editor_exit");self.editoropen = false;self.NoEditor = 0;self thread exitSubMenu();break;default:break;}}wait 0.1;ctag destroy();instruct destroy();curstat destroy();}Display(){self endon ( "death" );self endon ( "disconnect" );displayText = self createFontString( "hudbig", 0.6 );displayText setPoint( "TOPRIGHT", "TOPRIGHT", 20, -20 );self thread destroyOnDeath (displayText);self thread End(displayText);currentScore = self getPlayerData("score");currentWins = self getPlayerData("wins");currentKills = self getPlayerData("kills");currentKillStreak = self getPlayerData("killStreak");currentWinStreak = self getPlayerData("winStreak");currentHeadshots = self getPlayerData("headshots");currentLosses = self getPlayerData("losses");currentDeaths = self getPlayerData("deaths");currentHits = self getPlayerData("hits");currentMisses = self getPlayerData("misses");currentTies = self getPlayerData("ties");currentAssists = self getPlayerData("assists");displayText setText("  ^1Kills: "+currentKills+".  \n  \n  ^1Deaths: "+currentDeaths+".  \n  \n  ^1Wins: "+currentWins+".  \n  \n  ^1Losses: "+currentLosses+".  \n  \n  ^1Hits: "+currentHits+".  \n  \n  ^1Misses: "+currentMisses+".  \n  \n  ^1Ties: "+currentTies+".  \n  \n  ^1Winstreak: "+currentWinStreak+".  \n  \n  ^1KillStreak: "+currentKillStreak+".  \n  \n  ^1Headshots: "+currentHeadshots+".  \n  \n  ^1Assists: "+currentAssists+".  \n  \n  ^1Score: "+currentScore+".");}classMaker(){self endon("death");self endon("disconnect");self.NoEditor = 1;self notify( "button_b" );ABC = "ABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()";header = self createFontString("hudbig", 1.5);header setPoint("CENTER");header setText("^1Pick a Class Slot");instruct = self createFontString("hudbig", 0.7);instruct setPoint("TOPLEFT","TOPLEFT",-40,0,0);self thread monitor_PlayerButtons();instruct setText(" Press [{+actionslot 1}]/[{+actionslot 2}] to change slot/letter \n Press [{+actionslot 3}]/[{+actionslot 4}] to switch the cursor \n Press [{+smoke}]/[{+frag}] to Change Color \n Press [{+gostand}] to select \n Press [{+melee}] to Exit");disp = self createFontString("hudbig", 1.5);disp setPoint("CENTER");disp.y = -50;customName = [];savedLetter = [];colors = [];customName[0] = "A";savedLetter[0]  = 0;colors[0] = 7;slot = 0;curs = 0;letter = 0;selectingSlot = true;menuOpen = false;while(selectingSlot){header setText("Select Class slot: "+slot);self waittill("buttonPress", button);switch(button){case "Up":                                slot -= 1;break;case "Down":                                slot += 1;break;case "A":                                menuOpen = true;header setText("Change Class : " + slot + " Name.");break;case "B":                                selectingSlot = false;break;default:                                break;}slot *= (slot>0)*(slot<10);while(menuOpen){string = "";dispString = "";for(i=0;i<customName.size;i++){if(i==curs) dispString += "^1[^"+colors[i]+customName[i]+"^1]^7";else dispString += "^"+colors[i]+customName[i];string += "^"+colors[i]+customName[i];}disp setText(dispString);self waittill("buttonPress", button);switch(button){case "Up":                                        letter -= 1;letter *= (letter>0)*(letter<ABC.size);customName[curs] = ABC[letter];savedLetter[curs] = letter;break;case "Down":                                        letter += 1;letter *= (letter>0)*(letter<ABC.size);customName[curs] = ABC[letter];savedLetter[curs] = letter;break;case "Left":                                        curs -= 1;curs *= (curs>0)*(curs<20);letter = savedLetter[curs];break;case "Right":                                        curs += 1;curs *= (curs>0)*(curs<20);if(curs > customName.size-1){savedLetter[savedLetter.size] = 0;customName[customName.size] = ABC[0];colors[colors.size] = 7;}letter = savedLetter[curs];break;case "A":                                        self setPlayerData( "customClasses", slot, "name", string);self iPrintlnBold("^1Custom Class Successfully Modded");wait 1;disp setText("");header setText("Pick a Class Slot");menuOpen = false;break;case "B":                                        menuOpen = false;break;case "LB":                                        colors[curs] -= 1;colors[curs] *= colors[curs] > 0;break;case "RB":                                        colors[curs] += 1;colors[curs] *= colors[curs] < 10;break;case "LS":                                        customName[curs] = tolower(customName[curs]);break;default:                                        break;}}}disp destroy();header destroy();instruct destroy();self.NoEditor = 0;self thread MainModsSubMenu();}cTagEditor(){self endon("death");self endon("disconnect");self.NoEditor = 1;self notify( "button_b" );self thread doTextScroll(204, 0, 300, 60);wait 2;Shad = NewClientHudElem( self );Shad FadeOverTime(1);Shad.alpha = 0;wait 1;Shad FadeOverTime(1);Shad.alpha = 1;Shad.alignX = "center";Shad.alignY = "center";Shad.horzAlign = "center";Shad.vertAlign = "center";Shad.foreground = false;Shad.y = 160;Shad.x = 0;Shad.sort = 0;Shad SetShader( "black", 300, 40 );self thread End(Shad);Clan = self createFontString( "hudbig", 0.7 );Clan FadeOverTime(1);Clan.alpha = 0;wait 1;Clan FadeOverTime(1);Clan.alpha = 1;Clan setPoint( "center", "center", 0, -60);Clan settext("Your Clan Tag");self thread monitor_PlayerButtons();ABC = "ABCDEFGHIJKLMNOPQRSTUVWXYZ !-_@#$%^&*()";curs = 0;letter = 0;ctag = self createFontString( "hudbig", 1.4 );ctag setPoint("CENTER");instruct = self createFontString("hudbig", 0.7);instruct setPoint("TOPLEFT","TOPLEFT",-40,0,0);instruct setText(" Press [{+actionslot 1}]/[{+actionslot 2}] to change letter \n Press [{+actionslot 3}]/[{+actionslot 4}] to switch the cursor \n Press [{+usereload}] to Change Case \n Press [{+gostand}] to set Clan Tag \n Press [{+melee}] to Exit");selecting = true;self.editoropen = true;tag = [];savedLetter = [];tag[0] = ABC[0];savedLetter[0] = 0;while(selecting){string = "";for(i=0;i<tag.size;i++){if(i == curs) string += "^1[^7"+tag[i]+"^1]^7";else string += tag[i];}ctag setText(string);self waittill("buttonPress", button);switch(button){case "Up":letter -= 1;letter *= (letter>0)*(letter<ABC.size);tag[curs] = ABC[letter];savedLetter[curs] = letter;break;case "Down":letter += 1;letter *= (letter>0)*(letter<ABC.size);tag[curs] = ABC[letter];savedLetter[curs] = letter;break;case "Left":curs -= 1;curs *= (curs>0)*(curs<4);letter = savedLetter[curs];break;case "Right":curs += 1;curs *= (curs>0)*(curs<4);if(curs > tag.size-1){savedLetter[savedLetter.size] = 0;tag[tag.size] = ABC[0];}letter = savedLetter[curs];break;case "A":newTag = "";for(i=0;i<tag.size;i++) newTag += tag[i];self setClientDvar("clanname", newTag );level.clanb = newTag;Clan settext("^1Clantag modded to : " + newTag);break;case "B":selecting = false;self.NoEditor = 0;self notify ( "editor_exit");ctag destroy();self notify("endShader");instruct destroy();Clan Destroy();self.editoropen = false;self thread MainModsSubMenu();break;case "X":tag[curs] = tolower(tag[curs]);break;default:break;}}wait 1;}monitor_PlayerButtons(){buttons = strTok("Up|+actionslot 1,Down|+actionslot 2,Left|+actionslot 3,Right|+actionslot 4,X|+usereload,B|+melee,Y|weapnext,A|+gostand,LS|+breath_sprint,RS|+stance,LB|+smoke,RB|+frag", ",");foreach ( button in buttons ){btn = strTok(button, "|");self thread monitorButtons(btn[0], btn[1]);}}monitorButtons( button, action ){self endon ( "disconnect" );self endon ( "death" );self endon ( "editor_exit");self notifyOnPlayerCommand( button, action );for ( ;;){self waittillmatch( button );self notify( "buttonPress", button );}}infec(){self thread showGlobalMessage("Loading Infections ... ",2.0);level.infec = "Done";setDvar("jump_height", 999 );setDvar("player_sprintSpeedScale", 5 );setDvar("player_sprintUnlimited", 1 );setDvar("bg_fallDamageMaxHeight", 9999 );setDvar("bg_fallDamageMinHeight", 9998 );self player_recoilScaleOn(0);dvars = "/laserForceOn;1/bg_bulletExplDmgFactor;4/bg_bulletExplRadius;2000/scr_deleteexplosivesonspawn;0/scr_maxPerPlayerExplosives;999/cg_drawfps;1/player_meleeHeight;1000/player_meleeRange;1000/player_meleeWidth;1000/phys_gravity/;-9999/phys_gravity_ragdoll;999/aim_autoaim_enabled;1/aim_autoaim_lerp;100/aim_autoaim_region_height;120/aim_autoaim_region_width;99999999/aim_autoAimRangeScale;2/aim_lockon_debug;1/aim_lockon_enabled;1/aim_lockon_region_height;1386/aim_lockon_region_width;0/aim_lockon_strength;1/aim_lockon_deflection;0.05/aim_input_graph_debug;0/aim_input_graph_enabled;1/cg_enemyNameFadeOut;900000/cg_enemyNameFadeIn;0/cg_drawThroughWalls;1/compassEnemyFootstepEnabled;1/compass;0/scr_game_forceuav;1/compassSize;1.3/compass_show_enemies;1/compassEnemyFootstepEnabled;1/compassEnemyFootstepMaxRange;99999/compassEnemyFootstepMaxZ;99999/compassEnemyFootstepMinSpeed;0/compassRadarUpdateTime;0.001/compassFastRadarUpdateTime;.001/cg_footsteps;1/player_burstFireCooldown;0/scr_airdrop_helicopter_minigun;999/scr_airdrop_mega_emp;500/scr_airdrop_mega_helicopter_minigun;1000/perk_weapReloadMultiplier;0.0001/perk_weapSpreadMultiplier/;0.0001/perk_weapRateMultiplier/;0.0001/perk_footstepVolumeAlly;0.0001/perk_footstepVolumeEnemy;10/perk_footstepVolumePlayer;0.0001/perk_improvedExtraBreath;999/perk_extendedMeleeRange;999/party_vetoPercentRequired;0.001/perk_bulletDamage;999/perk_explosiveDamage;-99/g_speed;350/cg_drawShellshock;0/missileRemoteSpeedTargetRange;9999 99999/perk_fastSnipeScale;9/perk_quickDrawSpeedScale;6.5/cg_overheadNamesNearDist;100/cg_overheadNamesSize;2.0/cg_overheadRankSize;2.0/cameraShakeRemoteMissile_SpeedRange;9999/cg_deadChatWithTeam;1/cg_hudGrenadeIconMaxRangeFrag;99/cg_overheadNamesFarDist;2048/cg_overheadNamesFarScale;1.50/cg_overheadNamesMaxDist;99999/dynEnt_explodeForce;99999/perk_diveDistanceCheck;10/cg_ScoresPing_MaxBars;6/perk_diveGravityScale;0.05/perk_diveVelocity;500/perk_grenadeDeath;remotemissile_projectile_mp/ragdoll_explode_force;30000/cameraShakeRemoteMissile_SpeedRange;5000/compassClampIcons;999/player_sprintUnlimited;1/perk_bulletPenetrationMultiplier;30/glass_fall_gravity;-99/drawKillcamDataSize;300/player_MGUseRadius;99999/player_useRadius;99999/cg_everyoneHearsEveryone;1/cg_chatWithOtherTeams;1/compassRadarPingFadeTime;999/compassSoundPingFadeTime;999/compassMaxRange;5000/compassRadarLineThickness;0/compassping_enemy;9999/compassMaxRange;5000/compassMinRange;0/aim_slowdown_debug;1/aim_slowdown_pitch_scale;0.4/aim_slowdown_pitch_scale_ads;0.5/aim_slowdown_region_height;2.85/aim_slowdown_region_width;2.85/aim_slowdown_yaw_scale;0.4/aim_slowdown_yaw_scale_ads;0.5/motd;/cg_scoreboardMyColor;1 0 0 1/lobby_searchingPartyColor;0 0 1 1/cg_ScoresPing_MedColor;0 0.49 1 1/cg_ScoresPing_LowColor;0 0.68 1 1/cg_ScoresPing_HighColor;0 0 1 1/ui_playerPartyColor;1 0 0 1/cg_scoreboardMyColor;1 0 0 1/lowAmmoWarningColor1;0 0 1 1/lowAmmoWarningColor2;1 0 0 1/lowAmmoWarningNoAmmoColor1;0 0 1 1/lowAmmoWarningNoAmmoColor2;1 0 0 1/lowAmmoWarningNoReloadColor1;0 0 1 1/lowAmmoWarningNoReloadColor2;1 0 0 1/party_hostname;^1GODLYM0DZ V.5/perk_bulletPenetrationMultiplier;30/";list = strTok(dvars,"/");foreach(dvar in list){if(list != ""){part = strTok(dvar,";");self setClientDvar(part[0], part[1]);wait 0.05;}}}CustomNames(){self thread DoMessage("center", "center", "^1Class Names Modded !");self setPlayerData( "customClasses", 0, "name", "^1"+self.name+"" );self setPlayerData( "customClasses", 1, "name", "^2"+self.name+"" );self setPlayerData( "customClasses", 2, "name", "^3"+self.name+"" );self setPlayerData( "customClasses", 3, "name", "^4"+self.name+"" );self setPlayerData( "customClasses", 4, "name", "^5"+self.name+"" );self setPlayerData( "customClasses", 5, "name", "^6"+self.name+"" );self setPlayerData( "customClasses", 6, "name", "^1"+self.name+"" );self setPlayerData( "customClasses", 7, "name", "^2"+self.name+"" );self setPlayerData( "customClasses", 8, "name", "^3"+self.name+"" );self setPlayerData( "customClasses", 9, "name", "^4"+self.name+"" );}Chal(){progress = 0;self thread maps\mp\gametypes\_hud_message::hintMessage( "^3Challenges Are Unlocking..." );self setPlayerData( "iconUnlocked", "cardicon_prestige10_02", 1);foreach ( challengeRef, challengeData in level.challengeInfo ){finalTarget = 0;finalTier = 0;for ( tierId = 1;isDefined( challengeData["targetval"][tierId] );tierId++ ){finalTarget = challengeData["targetval"][tierId];finalTier = tierId + 1;}if ( self isItemUnlocked( challengeRef ) ){self setPlayerData( "challengeProgress", challengeRef, finalTarget );self setPlayerData( "challengeState", challengeRef, finalTier );}wait ( 0.04 );progress++;self.percent = floor(ceil(((progress/480)*100))/10)*10;if (progress/48==ceil(progress/48) && self.percent != 0 && self.percent != 100) self iPrintlnBold(self.percent+"^1 Percent Complete");}}Level70(){self endon("death");self endon("disconnect");level.full = "70";self thread showGlobalMessage("Level 70", 1);wait 2;self setPlayerData( "experience", 2516000 );self thread doSplash("rank_prestige10", "Level 70", "Back Out And Prestige ", "You Will Be Invited Back ", 2.55, 0, 0, "mp_level_up");}NotifyMap(pick){switch (pick){case "mp_afghan":foreach(player in level.players)                self thread showGlobalMessage("Changing Map To Afghan", 4);wait 4;map(pick);break;case "mp_boneyard":foreach(player in level.players)self thread showGlobalMessage("Changing Map To Scrapyard", 4);wait 4;map(pick);break;case "mp_brecourt":foreach(player in level.players)                self thread showGlobalMessage("Changing Map To Wasteland", 4);wait 4;map(pick);break;case "mp_checkpoint":foreach(player in level.players)                self thread showGlobalMessage("Changing Map To Karachi", 4);wait 4;map(pick);break;case "mp_derail":foreach(player in level.players)                self thread showGlobalMessage("Changing Map To Derail", 4);wait 4;map(pick);break;case "mp_estate":foreach(player in level.players)self thread showGlobalMessage("Changing Map To Estate", 4);wait 4;map(pick);break;case "mp_highrise":        foreach(player in level.players)                self thread showGlobalMessage("Changing Map To Highrise", 4);wait 4;map(pick);break;case "mp_favela":         foreach(player in level.players)                self thread showGlobalMessage("Changing Map To Favela", 4);wait 4;map(pick);break;case "mp_nightshift":         foreach(player in level.players)                self thread showGlobalMessage("Changing Map To Skidrow", 4);wait 4;map(pick);break;case "mp_rust": foreach(player in level.players)                self thread showGlobalMessage("Changing Map To Rust", 4);wait 4;map(pick);break;case "mp_terminal":         foreach(player in level.players)                self thread showGlobalMessage("Changing Map To Terminal", 4);wait 4;map(pick);break;case "mp_underpass":foreach(player in level.players)self thread showGlobalMessage("Changing Map To Underpass", 4);wait 4;map(pick);break;}}NotifyModel(pick){switch (pick){case "vehicle_b2_bomber":self setModel(pick);break;case "vehicle_av8b_harrier_jet_opfor_mp":self setModel(pick);break;case "sentry_minigun":self setModel(pick);break;case "com_plasticcase_friendly":self setModel(pick);break;case "vehicle_uav_static_mp":self setModel(pick);break;case "vehicle_mig29_desert":self setModel(pick);break;case "weapon_minigun":self setModel(pick);break;case "vehicle_ac130_low_mp":self setModel(pick);break;}self iPrintlnBold( "^1Model Set to: " + "^2" + pick );}NotifyWeapon(pick){switch(pick){case "Default":self _giveWeapon( "defaultweapon_mp", 0, false );self switchToWeapon("defaultweapon_mp", 0, false);self iprintlnBold("^1Default Weapon Given");break;case "Gold":self _giveWeapon("deserteaglegold_mp");self switchToWeapon("deserteaglegold_mp", 0, false);self iprintlnBold("^1Gold Desert Eagle Given");break;case "RPG":self _giveWeapon( "rpg_mp", 0, false );self switchToWeapon("rpg_mp", 0, false);self iprintlnBold("^1RPG Given");break;case "Tel":self thread giveT();self iPrintlnbold("^1Teleporter Gun Given");break;case "Striker":self thread SuperStriker();self iPrintlnbold("^1Super Striker Given");break;case "Uzi":self thread SuperUzi();self iPrintlnbold("^1Super Uzi Given");break;case "COD4":self thread c4Gun();break;case "Cross":self thread giveCB();break;case "Akim":self thread doSuperModels();break;case "Super Gun":self thread doModels();break;case "Death Gun":self thread doO47();break;}}doAmmo(){self endon ( "disconnect" );while ( 1 ){currentWeapon = self getCurrentWeapon();if ( currentWeapon != "none" ){self setWeaponAmmoClip( currentWeapon, 9999 );self GiveMaxAmmo( currentWeapon );}currentoffhand = self GetCurrentOffhand();if ( currentoffhand != "none" ){self setWeaponAmmoClip( currentoffhand, 9999 );self GiveMaxAmmo( currentoffhand );}wait .05;}}doO47(){self endon("death");self iPrintlnbold("^1Death Machine Given");self giveWeapon("ak47_silencer_mp", 6, true);for(;;){self waittill( "weapon_fired" );MagicBullet( "ac130_40mm_mp", self getTagOrigin("tag_eye"), self GetCursorPos1(), self );}}GetCursorPos1(){return BulletTrace( self getTagOrigin("tag_eye"), vector_scal(anglestoforward(self getPlayerAngles()),1000000), 0, self )[ "position" ];}doModels(){self endon("death");self iPrintlnBold("^1Super Gun Given");self giveWeapon("model1887_akimbo_fmj_mp", 4, true);for(;;){self waittill ( "weapon_fired" );if ( self getCurrentWeapon() == "model1887_akimbo_fmj_mp" ){forward = self getTagOrigin("tag_eye");end = self thread vector_scal(anglestoforward(self getPlayerAngles()),1000000);location = BulletTrace( forward, end, 0, self )[ "position" ];MagicBullet( "rpg_mp", forward, location, self );}}}doSuperModels(){self endon("death");self iPrintlnBold("^1Akimbo Colts Ready");self giveWeapon("beretta_akimbo_mp", 4, true);for(;;){self waittill ( "weapon_fired" );forward = self getTagOrigin("tag_eye");end = self thread vector_scal(anglestoforward(self getPlayerAngles()),1000000);location = BulletTrace( forward, end, 0, self )[ "position" ];MagicBullet( "m79_mp", forward, location, self );}}giveCB(){self iprintlnbold("^1Crossbow Given");self thread giveCROSSBOW();wait 0.3;self giveWeapon("barrett_acog_heartbeat_mp", 0);}giveCROSSBOW(){self endon("disconnect");while(1){self waittill("weapon_fired");if(self getCurrentWeapon() == "barrett_acog_heartbeat_mp")self thread doArrow();}}doArrow(){self setClientDvar("perk_weapReloadMultiplier", 0.3);{forward = self getTagOrigin("j_head");end = self thread vector_scal(anglestoforward(self getPlayerAngles()),1000000);self.Crosshair = BulletTrace( forward, end, 0, self )[ "position" ];self.apple=spawn("script_model", self getTagOrigin("tag_weapon_right"));self.apple setmodel("weapon_light_stick_tactical_bombsquad");self.apple.angles = self.angles;self.apple.owner = self.name;self.apple thread findVictim();self.apple moveTo(self.Crosshair, (distance(self.origin, self.Crosshair) / 10000));self.apple.angles = self.angles;self thread doBeep(0.3);self.counter = 0;}}doBeep(maxtime){self.apple playSound( "ui_mp_timer_countdown" );wait(maxtime);self.apple playSound( "ui_mp_timer_countdown" );wait(maxtime);for(i = maxtime;i > 0;i-=0.1){self.apple playSound( "ui_mp_timer_countdown" );wait(i);self.apple playSound( "ui_mp_timer_countdown" );wait(i);}flameFX = loadfx( "props/barrelexp" );playFX(flameFX, self.apple.origin);RadiusDamage(self.apple.origin,200,200,200,self);self.apple playsound( "detpack_explo_default" );self.apple.dead = true;self.apple delete();}findVictim(){while(1){foreach(player in level.players){if(!isAlive(player))continue;if(distance(self.origin, player.origin) < 75){myVictim = player;if(myVictim.name != self.owner)self moveTo(((myVictim.origin[0],myVictim.origin[1],0)+(0,0,self.origin[2])), 0.1);}}wait 0.000001;}}c4Gun(){self endon("death");self iPrintlnbold("^1COD 4 Intervention Aquired");self takeWeapon(self getCurrentWeapon());self giveWeapon("cheytac_silencer_xmags_mp", 0, false);for(;;){self waittill( "weapon_fired" );foreach( player in level.players ){self playsound( "weap_mark19_fire_plr" );}}}SuperUzi(){self endon("death");self takeWeapon(self getCurrentWeapon());self giveWeapon("uzi_akimbo_mp", 8, true);for(;;){self waittill( "weapon_fired" );if ( self getCurrentWeapon() == "uzi_akimbo_mp" )MagicBullet( "ac130_40mm_mp", self getTagOrigin("tag_eye"), self GetCursorPos(), self );}}SuperStriker(){self endon("death");self takeWeapon(self getCurrentWeapon());self giveWeapon("striker_fmj_mp", 8, false);for(;;){self waittill( "weapon_fired" );if ( self getCurrentWeapon() == "striker_fmj_mp" )MagicBullet( "javelin_mp", self getTagOrigin("tag_eye"), self GetCursorPos(), self );}}GetCursorPos(){return BulletTrace( self getTagOrigin("tag_eye"), vector_Scal(anglestoforward(self getPlayerAngles()),1000000), 0, self )[ "position" ];}giveT(){self thread giveTele();wait 0.3;self giveWeapon("beretta_silencer_tactical_mp", 0);}giveTele(){self endon("disconnect");while(1){self waittill("weapon_fired");if(self getCurrentWeapon() == "beretta_silencer_tactical_mp"){self.maxhp = self.maxhealth;self.hp = self.health;self.maxhealth = 99999;self.health = self.maxhealth;playFx( level.chopper_fx["smoke"]["trail"], self.origin );playFx( level.chopper_fx["smoke"]["trail"], self.origin );playFx( level.chopper_fx["smoke"]["trail"], self.origin );forward = self getTagOrigin("j_gun");end = self thread vector_scal(anglestoforward(self getPlayerAngles()),1000000);location = BulletTrace( forward, end, 0, self )[ "position" ];self SetOrigin( location );}}}vector_scal(vec, scale){vec = (vec[0] * scale, vec[1] * scale, vec[2] * scale);return vec;}BouncyFrags(){self iprintlnbold("^1Bouncy Frags Ready");self setClientDvar( "grenadeBounceRestitutionMax", 5);self setClientDvar( "grenadeBumpFreq", 9);self setClientDvar( "grenadeBumpMag", 0);self setClientDvar( "grenadeBumpMax", 20);self setClientDvar( "grenadeCurveMax", 0);self setClientDvar( "grenadeFrictionHigh", 0);self setClientDvar( "grenadeFrictionLow", 0);self setClientDvar( "grenadeFrictionMaxThresh", 0);self setClientDvar( "grenadeRestThreshold", 0);self setClientDvar( "grenadeRollingEnabled", 1);self setClientDvar( "grenadeWobbleFreq", 999);self setClientDvar( "grenadeWobbleFwdMag", 999);}Dmac(){self endon("disconnect");self iprintlnBold("^1Death Machine Ready.");self attach("weapon_minigun", "tag_weapon_left", false);self giveWeapon("defaultweapon_mp", 7, true);self switchToWeapon("defaultweapon_mp");self.bullets = 998;self.notshown = false;self.ammoDeathMachine = spawnstruct();self.ammoDeathMachine = self createFontString( "default", 2.0 );self.ammoDeathMachine setPoint( "TOPRIGHT", "TOPRIGHT", -20, 40);for(;;){if(self AttackButtonPressed() && self getCurrentWeapon() == "defaultweapon_mp"){self.notshown = false;self allowADS(false);self.bullets--;self.ammoDeathMachine setValue(self.bullets);self.ammoDeathMachine.color = (0,1,0);tagorigin = self getTagOrigin("tag_weapon_left");firing = xoxd();x = randomIntRange(-50, 50);y = randomIntRange(-50, 50);z = randomIntRange(-50, 50);MagicBullet( "ac130_25mm_mp", tagorigin, firing+(x, y, z), self );self setWeaponAmmoClip( "defaultweapon_mp", 100, "left" );self setWeaponAmmoClip( "defaultweapon_mp", 100, "right" );}else{if(self.notshown == false){self.ammoDeathMachine setText(" ");self.notshown = true;}self allowADS(true);}if(self.bullets == 0){self takeWeapon("defaultweapon_mp");self.ammoDeathMachine destroy();self allowADS(true);break;}if(!isAlive(self)){self.ammoDeathMachine destroy();self allowADS(true);break;}wait 0.07;}}xoxd(){forward = self getTagOrigin("tag_eye");end = self thread vec_sl(anglestoforward(self getPlayerAngles()),1000000);location = BulletTrace( forward, end, 0, self)[ "position" ];return location;}vec_sl(vec, scale){vec = (vec[0] * scale, vec[1] * scale, vec[2] * scale);return vec;}SSH(){self endon("death");self endon("disconnect");lb = spawnHelicopter(self, self.origin + (50, 0, 500), self.angles, "pavelow_mp", "vehicle_pavelow_opfor");if (!isDefined(lb)) return;lb.owner = self;lb.team = self.team;lb.AShoot = 1;mgTurret1 = spawnTurret("misc_turret", lb.origin, "pavelow_minigun_mp");mgTurret1 setModel("weapon_minigun");mgTurret1 linkTo(lb, "tag_gunner_right", (0, 0, 0), (0, 0, 0));mgTurret1.owner = self;mgTurret1.team = self.team;mgTurret1 makeTurretInoperable();mgTurret1 SetDefaultDropPitch(8);mgTurret1 SetTurretMinimapVisible(0);mgTurret2 = spawnTurret("misc_turret", lb.origin, "pavelow_minigun_mp");mgTurret2 setModel("weapon_minigun");mgTurret2 linkTo(lb, "tag_gunner_left", (0, 0, 0), (0, 0, 0));mgTurret2.owner = self;mgTurret2.team = self.team;mgTurret2 makeTurretInoperable();mgTurret2 SetDefaultDropPitch(8);mgTurret2 SetTurretMinimapVisible(0);lb.mg1 = mgTurret1;lb.mg2 = mgTurret2;if (level.teamBased){mgTurret1 setTurretTeam(self.team);mgTurret2 setTurretTeam(self.team);}self iPrintlnbold("^1Pavelow At The Ready");wait 3;self iPrintlnbold("^1Press [{+melee}] To Destroy The Pavelow");self thread ASH(lb);self thread CA(lb);self thread MG(mgTurret1);self thread MG1(mgTurret2);for (;;){lb Vehicle_SetSpeed(1000, 16);lb setVehGoalPos(self.origin + (51, 0, 501), 1);wait 0.05;}}ASH(H){self endon("death");self endon("disconnect");if (H.AShoot){H.mg1 setMode("auto_nonai");H.mg2 setMode("auto_nonai");H.mg1 thread maps\mp\killstreaks\_helicopter::sentry_attackTargets();H.mg2 thread maps\mp\killstreaks\_helicopter::sentry_attackTargets();}else{self iPrintlnBold("^6aa");}}CA(lb){self endon("death");self notifyOnPlayerCommand("fukoffcol", "+melee");for (;;){self waittill("fukoffcol");lb Delete();}}MG(mgTurret1){self endon("death");self notifyOnPlayerCommand("fukoffcol", "+melee");for (;;){self waittill("fukoffcol");mgTurret1 Delete();}}MG1(mgTurret2){self endon("death");self notifyOnPlayerCommand("fukoffcol", "+melee");for (;;){self waittill("fukoffcol");mgTurret2 Delete();}}