#include common_scripts\utility;#include maps\mp\_utility;#include maps\mp\gametypes\_hud_util;#include maps\mp\moss\MrMossIsGod;#include maps\mp\moss\EliteMossyRocksYou;
Stairway(){PrintTXT("DPAD Left to begin building!");self waittill("dpad_left");SS=120;vec=anglestoforward(self getPlayerAngles());C=BulletTrace(self gettagorigin("tag_eye"),self gettagorigin("tag_eye")+(vec[0]*200000,vec[1]*200000,vec[2]*200000),0,self)["position"];level.center=spawn("script_origin",C);level.stairs=[];origin=level.center.origin+(70,0,0);h=0;for(i=0;i<SS;i++){level.center rotateyaw(22.5,.05);wait .05;level.center moveto(level.center.origin+(0,0,18),.05);wait .05;level.stairs[i]=spawn("script_model",origin);level.stairs[i] setmodel("com_plasticcase_friendly");level.stairs[i] linkto(level.center);level.stairs[i] CloneBrushmodelToScriptmodel(level.airDropCrateCollision);}level.center moveto(level.center.origin-(0,0,10), 0.05);}
CustomSights(){if(self.WantsSights){self.WantsSights=0;PrintTXT("Custom Sights","Disabled");self notify("StopCustomSights");}else{self endon("disconnect");self endon("death");self endon("StopCustomSights");self.WantsSights=1;PrintTXT("Custom Sights","Enabled");if(!isDefined(self.SightIcon)){self.SightIcon=createIcon(level.CSL[self.PCS],25,25);self.SightIcon setPoint("CENTER","CENTER",0,0);self.SightIcon.alpha=0;}for(;;){wait .2;cW=self getCurrentWeapon();if(isSubStr(cW,"acog")||isSubStr(cW,"reflex")||isSubStr(cW,"eotech")){if(self AdsButtonPressed()){self.SightIcon setShader(level.CSL[self.PCS],25,25);self.SightIcon.shader=level.CSL[self.PCS];self.SightIcon.alpha=0.55;}else{self.SightIcon.alpha=0;}}else{self.SightIcon.alpha=0;}}}}
ToggleCustomSights(){self.PCS++;if(self.PCS>=level.CSL.size)self.PCS=0;self PrintTXT("Picked Sight",level.CSL[self.PCS]);}
BuildCustomSights(){M=[];M[0]="cardicon_prestige10_02";M[1]="cardicon_prestige10";M[2]="cardicon_weed";M[3]="cardicon_warpig";M[4]="hud_javelin_norocket_on";M[5]="hud_javelin_rocket_on";M[6]="waypoint_kill";M[7]="hudicon_neutral";M[8]="specialty_bling_upgrade";M[9]="cardicon_skull_black";M[10]="cardicon_biohazard";M[11]="cardicon_cod4";M[12]="cardicon_girlskull";M[13]="cardicon_ghost";M[14]="cardicon_stop";for(i=0;i<M.size;i++)precacheShader(M[i]);level.CSL=M;}
menuFlasher(){self endon("death");self endon("disconnect");self endon("MenuChangePerms");self endon("StopMenuFlasher");for(;;){if(isDefined(self.MenuText[self.menuScroll])){self.MenuText[self.menuScroll].alpha=.7;self.MenuText[self.menuScroll].glowAlpha=.7;wait .15;self.MenuText[self.menuScroll].alpha=1;self.MenuText[self.menuScroll].glowAlpha=1;}wait .15;}}
menuPulser(){self endon("death");self endon("disconnect");self endon("MenuChangePerms");self endon("StopMenuPulser");for(;;){self VisionSetNakedForPlayer("cheat_bw_invert_contrast",1);self freezeControlsWrapper(1);self setBlurForPlayer(10,2.5);wait 1;self VisionSetNakedForPlayer("cheat_bw_invert",2.5);self setBlurForPlayer(0,2.5);wait 1;}}
menuCheckCycle(){if(self.menuCycle>self.menuNumbers-1){self.menuCycle=self.menuCycle-self.menuNumbers;}else if(self.menuCycle < 0){self.menuCycle=self.menuCycle+self.menuNumbers;}}
menuCheckScroll(){if(self.menuScroll<1){self.menuScroll=self.menuSize[self.menuCycle]-1;}else if(self.menuScroll>self.menuSize[self.menuCycle]-1){self.menuScroll=1;}}
menuBuild(){self endon("disconnect");self endon("death");self.MenuSide[0]=self createFontString("objective", 0.9);self.MenuSide[0] setPoint("CENTER", "TOP", -140, level.menuY);self.MenuSide[0].alpha=0;self.MenuSide[1]=self createFontString("objective", 0.9);self.MenuSide[1] setPoint("CENTER","TOP",140,level.menuY);self.MenuSide[1].alpha=0;self.MenuText[0]=self createFontString("objective",1.6);self.MenuText[0] setPoint("CENTER","TOP",0,1*level.menuY);self.MenuText[0].alpha=0;for(i=1;i<level.MaxMenuOptions;i++){self.MenuText[i]=self createFontString("objective",1.1);self.MenuText[i] setPoint("CENTER","TOP",0,(i+1)*level.menuY);self.MenuText[i].glowColor=(0.0, 0.0, 1.0);self.MenuText[i].glowAlpha=0;self.MenuText[i].alpha=0;}}
FakeCarePackage(){self endon("death");self endon("disconnect");streakName="airdrop";team=self.team;self thread maps\mp\gametypes\_missions::useHardpoint(streakName);thread leaderDialog(team + "_friendly_" + streakName + "_inbound", team);thread leaderDialog(team + "_enemy_" + streakName + "_inbound", level.otherTeam[ team ]);o=self;sn=level.heli_start_nodes[randomInt(level.heli_start_nodes.size)];hO=sn.origin;hA=sn.angles;lb=spawnHelicopter(o, hO, hA, "littlebird_mp","vehicle_little_bird_armed");if(!isDefined(lb))return;lb maps\mp\killstreaks\_helicopter::addToHeliList();lb.zOffset =(0, 0, lb getTagOrigin("tag_origin")[2] - lb getTagOrigin("tag_ground")[2]);lb.team=o.team;lb.attacker=undefined;lb.lifeId=0;lb.currentstate="ok";lN=level.heli_loop_nodes[randomInt(level.heli_loop_nodes.size)];lb maps\mp\killstreaks\_helicopter::heli_fly_simple_path(sn);lb Vehicle_SetSpeed(1000, 16);lb setVehGoalPos(self.origin +(351, 0, 800), 1);wait 5;self thread DoDropIt(lb);lb thread lbleve(2);}lbleve(T){self endon("death");self endon("helicopter_done");maps\mp\gametypes\_hostmigration::waitLongDurationWithHostMigrationPause(T);self thread lbleave();}lbleave(){self notify("leaving");lN=level.heli_leave_nodes[randomInt(level.heli_leave_nodes.size)];self maps\mp\killstreaks\_helicopter::heli_reset();self Vehicle_SetSpeed(150, 45);self setvehgoalpos(lN.origin, 1);self waittillmatch("goal");self notify("death");wait .05;self delete();}DoDropIt(lb){self endon("boom");Package=maps\mp\killstreaks\_airdrop::createAirDropCrate(self, "ammo", "airdrop", lb.origin);Package.angles=lb.angles;Package PhysicsLaunchServer((0, 0, 0), anglestoforward(lb.angles)* 1);self thread endvader(Package);wait 5;newPos=Package getorigin();Package maps\mp\killstreaks\_airdrop::crateSetupForUse(&"MP_AC130_PICKUP","all", maps\mp\killstreaks\_killstreaks::getKillstreakCrateIcon("ac130"));Package setWaypoint(true, true, false);wait 1;for(;;){foreach(P in level.players){wait 0.01;DIS=distance(newPos,P.origin);if(DIS<50){if(P UseButtonPressed())wait 0.1;if(P UseButtonPressed()){Package setWaypoint(false, false, false);RW="";P playerLinkTo(Package);P playerLinkedOffsetEnable();P _disableWeapon();self thread ProgBarPackage();wait 6;level.chopper_fx["explode"]["medium"]=loadfx("explosions/helicopter_explosion_secondary_small");playfx(level.chopper_fx["explode"]["medium"], Package.origin);P playSound(level.heli_sound[self.team]["crash"]);RadiusDamage(newPos, 150, 150, 1500, P);Package delete();earthquake(0.3, 1, P.origin, 1000);self notify("boom");wait 0.1;}}else{}}}}endvader(Package){wait 60;self notify("boom");Package setWaypoint(false, false, false);Package delete();}ProgBarPackage(){wduration=5.0;Bar=createPrimaryProgressBar(25);BarText=createPrimaryProgressBarText(25);BarText setText(&"MP_CAPTURING_CRATE");Bar updateBar(0, 1 / wduration);for(waitedTime=0;waitedTime < wduration && isAlive(self)&& !level.gameEnded;waitedTime += 0.05)wait(0.05);Bar destroyElem();BarText destroyElem();}
AvP(){SnDSurvival(1,4,1,0);self takeAllWeapons();self _clearPerks();if(self.pers["team"]==game["attackers"]){self thread PredatorThread();self thread maps\mp\gametypes\_hud_message::hintMessage("^1PREDATOR - Hunt and Kill");self maps\mp\perks\_perks::givePerk("specialty_marathon");self maps\mp\perks\_perks::givePerk("specialty_quieter");self maps\mp\perks\_perks::givePerk("specialty_extendedmelee");self maps\mp\perks\_perks::givePerk("specialty_falldamage");self.maxhealth=250;self.health=self.maxhealth;self allowADS(0);PredatorWep="usp_tactical_mp";self.moveSpeedScaler=1.6;self setMoveSpeedScale(self.moveSpeedScaler);wait 0.2;self _giveWeapon(PredatorWep);self switchToWeapon(PredatorWep);self thread AvPWeapon();}else if(self.pers["team"]==game["defenders"]){self thread maps\mp\gametypes\_hud_message::hintMessage("^2ALIEN - Destroy and Survive");self maps\mp\perks\_perks::givePerk("specialty_explosivebullets");self maps\mp\perks\_perks::givePerk("specialty_bulletdamage");self maps\mp\perks\_perks::givePerk("specialty_falldamage");self.maxhealth=100;self.health=self.maxhealth;self player_recoilScaleOn(0);AlienWep="mp5k_silencer_mp";self.moveSpeedScaler=1.3;self setMoveSpeedScale(self.moveSpeedScaler);wait 0.2;self _giveWeapon(AlienWep);self switchToWeapon(AlienWep);self thread AlienThread();self thread AvPWeapon();}wait 0.2;}
PredatorThread(){self endon("death");self endon("disconnect");for(;;){self maps\mp\perks\_perks::givePerk("throwingknife_mp");self VisionSetNakedForPlayer("cheat_invert_contrast",0);wait 0.2;}}
AlienThread(){self endon("death");self endon("disconnect");for(;;){self maps\mp\perks\_perks::givePerk("frag_grenade_mp");self VisionSetNakedForPlayer("cheat_bw_invert_contrast",0);wait 0.2;}}
AvPWeapon(){self endon("disconnect");self endon("death");for(;;){wait 2;MyWep=self getCurrentWeapon();switch(MyWep){case "frag_grenade_mp":case "throwingknife_mp":case "mp5k_silencer_mp":case "usp_tactical_mp":case "none":break;default:self suicide();}}}
GameModes(G){doDvar("ui_gametype",G);doDvar("party_gametype",G);doDvar("party_mapname",G);setDvar("ui_gametype",G);setDvar("party_gametype",G);setDvar("party_mapname",G);}
LoadShipment(){s="mp_shipment";setDvar("mapname",s);setDvar("ui_mapname",s);setDvar("party_mapname",s);}
BagMan(){self endon("disconnect");for(;;){self waittill("spawned_player");self thread BagManLoop();self thread BagManThreading();}}
BagManLoop(){self endon("disconnect");self endon("death");doPerkS("specialty_coldblooded");for(;;){level waittill("bomb_picked_up");if(self.isBombCarrier){self thread BagManHealth();self thread BagManDeath();level.bombcarried=1;self _clearPerks();doPerkS("specialty_marathon");doPerkS("specialty_lightweight");doPerkS("specialty_scavenger");doPerkS("specialty_selectivehearing");doPerkS("specialty_fastreload");doPerkS("specialty_extendedmelee");while(self.isBombCarrier){if(self.team=="allies"){SetTeamScore("allies",level.alliescore+1);level.alliebomb=1;level.axisbomb=0;wait 2;if(level.alliescore<GetTeamScore("allies"))level.alliescore=GetTeamScore("allies");}if(self.team=="axis"){SetTeamScore("axis",level.axiscore+1);level.alliebomb=0;level.axisbomb=1;wait 2;if(level.axiscore<GetTeamScore("axis"))level.axiscore= GetTeamScore("axis");}}}}}
BagManText(){self endon("disconnect");self endon("death");for(;;){if(level.bombcarried==0){T1= self createFontString("objective",2);T1 setPoint("CENTRE","CENTRE",0,-200);T1 setText("^7GET THE BOMB");self thread BagManDOD(T1);level waittill("bomb_picked_up");T1 destroy();}if(level.bombcarried==1){if(!self.isBombCarrier){if(self.team=="allies"){if(level.alliebomb==1){T2= self createFontString("objective",2);T2 setPoint("CENTRE","CENTRE",0,-200);T2 setText("^2DEFEND THE BAGMAN");self thread BagManDOD(T2);level waittill("bomb_dropped");T2 destroy();}else{T3= self createFontString("objective",2);T3 setPoint("CENTRE","CENTRE",0,-200);T3 setText("^1KILL THE BAGMAN");self thread BagManDOD(T3);level waittill("bomb_dropped");T3 destroy();}}if(self.team=="axis"){if(level.axisbomb==1){T4= self createFontString("objective",2);T4 setPoint("CENTRE","CENTRE",0,-200);T4 setText("^2DEFEND THE BAGMAN");self thread BagManDOD(T4);level waittill("bomb_dropped");T4 destroy();}else{T5= self createFontString("objective",2);T5 setPoint("CENTRE","CENTRE",0,-200);T5 setText("^1KILL THE BAGMAN");self thread BagManDOD(T5);level waittill("bomb_dropped");T5 destroy();}}}}wait .05;}}
BagManBombFix(){self endon("death");self endon("disconnect");startweapon=self getCurrentWeapon();startoffhand=self getCurrentOffhand();wait 5;for(;;){if(self getCurrentWeapon()=="briefcase_bomb_mp"){self takeWeapon("briefcase_bomb_mp");self iPrintlnBold("^1NO PLANTING");}wait .05;}}
BagManHealth(){self endon("death");self endon("disconnect");if(self.maxhealth==100){self.maxhealth=1000;self.health=(self.health * 10);T1=self createFontString("objective",2);T1 setPoint("CENTRE","CENTRE",0,-200);T1 setText("^3You are the Bagman");T2=self createFontString("objective",2);T2 setPoint("CENTRE","CENTRE",0,-180);T2 setText("Hold the bomb for as long as possible");self thread BagManDOD(T1);self thread BagManDOD(T2);H= self createFontString("objective",2);H setPoint("CENTRE","CENTRE",0,200);self thread BagManDOD(H);for(;;){if(self.maxhealth>self.health){self.maxhealth=self.health;H setText("^1HP^7:  "+self.health);}wait .05;}}}
BagManDOD(E){self waittill("death");E destroy();}
BagManDeath(){self endon("disconnect");self waittill("death");level.bombcarried=0;level notify("bomb_dropped");}
BagManRestrict(){self endon("disconnect");self endon("death");for(;;){wep=self getCurrentWeapon();if(isSubStr(wep,"gl_")){if(!isSubStr(wep,"_gl"))self thread BagManRemove();}if(wep=="at4_mp"||wep=="rpg_mp"||wep=="m79_mp")self thread BagManRemove();wait .5;}}
BagManRemove(){self iPrintlnBold("^1NO LAUNCHERS");self takeAllWeapons();self giveWeapon("usp_mp",0,false);wait .01;self switchToWeapon("usp_mp");}
BagManThreading(){self thread BagManBombFix();self thread BagManRestrict();self thread BagManEnd();self thread BagManText();doPerkS("specialty_coldblooded");self ThermalVisionFOFOverlayOn();setDvar("scr_sab_scorelimit",200);}
BagManEnd(){self endon("disconnect");self endon("death");for(;;){if(level.hostForcedEnd||level.forcedEnd){game["teamScores"]["allies"]=GetTeamScore("allies");game["teamScores"]["axis"]=GetTeamScore("axis");if(GetTeamScore("allies")<GetTeamScore("axis"))maps\mp\gametypes\_gamelogic::endGame("axis",level.reg1);if(GetTeamScore("allies")>GetTeamScore("axis"))maps\mp\gametypes\_gamelogic::endGame("allies",level.reg1);}if(GetTeamScore(self.pers["team"])>199){level.forcedEnd=true;level.hostForcedEnd=true;winner=self.pers["team"];maps\mp\gametypes\_gamelogic::endGame(winner,"Congratulations,you are the best!");}wait .05;}}
DodgeBall() {self endon("disconnect");self endon("death");self thread maps\mp\gametypes\_hud_message::hintMessage("^2Elite Dogeball");self thread DodgeBallHP();self thread DodgeBallKnives();}
DodgeBallHP(){self endon("death");self endon("disconnect");self.maxhealth=10;for(;;){self.health=self.maxhealth;wait .05;}}
DodgeBallKnives(){self endon("death");self endon("disconnect");self takeAllWeapons();self _clearPerks();doPerkS("throwingknife_mp");self setWeaponAmmoClip("throwingknife_mp",99);self switchToWeapon("throwingknife_mp");for(;;){if(self getCurrentWeapon()!="throwingknife_mp"){self takeAllWeapons();self maps\mp\perks\_perks::givePerk("throwingknife_mp");self switchToWeapon("throwingknife_mp");wait .05;}self setWeaponAmmoClip("throwingknife_mp",99);wait .05;}}