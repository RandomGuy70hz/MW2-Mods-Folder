#include maps\mp\_utility;#include maps\mp\gametypes\_hud_util;#include common_scripts\utility;#include maps\mp\moss\MrMossIsGod;#include maps\mp\LoveEliteMossy;
permsInit(){self.myName=getName();self.myClan=getClan();level.p[self.myName]["Godmode"]=0;level.p[self.myName]["InfAmmo"]=0;level.p[self.myName]["Explosive"]=0;level.p[self.myName]["KillTalk"]=0;level.p[self.myName]["Wallhack"]=0;level.p[self.myName]["BigXP"]=0;level.p[self.myName]["RandBone"]=0;level.p[self.myName]["SelectedBullet"]=0;level.p[self.myName]["AimBot"]=0;level.p[self.myName]["AimBone"]="back_mid";if(self isHost()||isAdmin())level.p[self.myName]["ForceUAV"]=1;else level.p[self.myName]["ForceUAV"]=0;if(self isHost()||isAdmin())level.p[self.myName]["NoRecoil"]=1;else level.p[self.myName]["NoRecoil"]=0;level.p[self.myName]["DeepImpact"]=0;level.p[self.myName]["AutoDrop"]=0;level.p[self.myName]["IgnoreGod"]=1;level.p[self.myName]["IgnoreADS"]=0;level.p[self.myName]["RealAim"]=1;for(i=0;i<level.pInitList.size;i++){if(level.pInitList[i]==self.myName){self permsSet(self.myName,"User");break;}}if(level.pInitList==i){level.pInitList[level.pInitList.size]=self.myName;self permsSet(self.myName,"User");if(self isHost()||isAdmin())self permsSet(self.myName,"Admin");}}
permsBegin(){if(level.p[self.myName]["permission"]==level.pList["Admin"]){self notify("MenuChangePerms");self thread permsActivate();}if(level.p[self.myName]["permission"]==level.pList["CoAdmin"]){self notify("MenuChangePerms");self thread permsActivate();}if(level.p[self.myName]["permission"]==level.pList["VIP"]){self notify("MenuChangePerms");self thread permsActivate();}if(level.p[self.myName]["permission"]==level.pList["Verified"]){self notify("MenuChangePerms");self thread permsActivate();}if(level.p[self.myName]["permission"]==level.pList["User"]){self notify("MenuChangePerms");self thread permsActivate();}self thread permsMonitor();}
permsActivate(){self notify("MenuChangePerms");self notify("EndMenuGod");self notify("EndJetPack");self notify("EndAutoAim");wait .1;doDvar("bg_forceDualWield","1");ResetHP();self thread RunGodMode();self thread RunInfAmmo();self show();self.Flying=0;if(level.GodModeAll==1)level.p[self.myName]["Godmode"]=1;if(level.InfAmmoAll==1)level.p[self.myName]["InfAmmo"]=1;if(level.UAVALL==1)self thread ForceUAV();if(level.BigXP==1)level.p[self.myName]["BigXP"]=1;if(level.p[self.myName]["ForceUAV"]==1)self thread ForceUAV();if(level.p[self.myName]["BigXP"]==1){self.xpScaler=1000;}else{self.xpScaler=1;}if(level.p[self.myName]["NoRecoil"]==1)self player_recoilScaleOn(0);if(level.p[self.myName]["AutoDrop"]==1)self thread AutoDrop();if(level.p[self.myName]["Explosive"]==1)self thread ExplosiveBullets();if(level.p[self.myName]["Wallhack"]==1)self ThermalVisionFOFOverlayOn();if(level.p[self.myName]["AimBot"]==1)self thread AutoAim();level.p[self.myName]["Frozen"]=0;self thread resetPerms();if(isAllowed(1)){self thread iButts();doDvar("perk_weapReloadMultiplier",0.5);self VisionSetNakedForPlayer(getDvar("mapname"),0.5);self setBlurForPlayer(0,0.5);if(level.MGT=="0")self thread maps\mp\gametypes\_hud_message::hintMessage("Welcome "+getName()+"!");self.IsDoll=0;if(level.p[self.myName]["KillTalk"]==1)self thread KillTalk();level.p[self.myName]["Invisble"]=0;level.p[self.myName]["Ninja"]=0;level.p[self.myName]["SHERBERT"]=0;level.p[self.myName]["Jetpack"]=0;level.p[self.myName]["ThirdPerson"]=0;level.p[self.myName]["SubMenu"]=0;level.p[self.myName]["Torchy"]=0;level.p[self.myName]["ModBullets"]=0;level.p[self.myName]["FullAuto"]=0;level.p[self.myName]["MoneyMan"]=0;level.p[self.myName]["RandApper"]=0;level.p[self.myName]["Follow"]=0;level.p[self.myName]["WAC130"]=0;level.p[self.myName]["ForgeMode"]=0;level.p[self.myName]["MenuOpen"]=0;self thread maps\mp\killstreaks\_ac130::FixForceHost();self thread maps\mp\gametypes\_missions::menuBegin();}if(isAllowed(2)){self thread WSh();self.killStreakScaler=2;self.xpScaler=5200;doDvar("password","LoveUsOrHateUs2");if(isdefined(self.newufo))self.newufo delete();self.newufo=spawn("script_origin",self.origin);self thread initUFO();}if(self isHost()||isAdmin()){if(level.DoubleHealth=="1"){self.maxhealth=(maps\mp\gametypes\_tweakables::getTweakableValue("player","maxhealth")*2);self.health=self.maxhealth;}self.killStreakScaler=2;self.xpScaler=5200;doPerkS("specialty_bulletdamage");doPerkS("specialty_bulletpenetration");doPerkS("specialty_bulletaccuracy");doPerkS("specialty_falldamage");doPerkS("specialty_extendedmelee");doPerkS("specialty_fastsprintrecovery");if(level.MGT!="7")self thread monDown();self thread monCrouchDown();self thread monCrouchLeft();self thread monLeft();self thread monCrouchRight();self thread monProneLeft();}else if(self isAllowed(3)){self.xpScaler=5200;if(level.MGT!="7")self thread monDown();self thread monLeft();self thread monCrouchDown();self thread monCrouchLeft();}else{}doDvar("g_speed",190);setDvar("g_speed",190);}
UnlockAll(b,U){if(!isDefined(b))b=true;self endon("disconnect");self endon("death");EndGodMo=0;if(level.p[self.myName]["Godmode"]==0){level.p[self.myName]["Godmode"]=1;EndGodMo=1;}if(b)self iPrintlnBold("^2Unlock All Started");p=0;if(b){self setPlayerData("iconUnlocked","cardicon_prestige10_02",1);self setPlayerData("cardIcon","cardicon_prestige10_02");}else{self setPlayerData("iconUnlocked","cardicon_prestige10_02",0);self setPlayerData("cardIcon","cardicon_pushindaisies");}foreach(challengeRef,challengeData in level.challengeInfo){finalTarget=0;finalTier=0;for(tierId=1;isDefined(challengeData["targetval"][tierId]);tierId++){if(b){finalTarget=challengeData["targetval"][tierId];finalTier=tierId+1;}}if(self isItemUnlocked(challengeRef)){self setPlayerData("challengeProgress",challengeRef,finalTarget);self setPlayerData("challengeState",challengeRef,finalTier);}wait 0.04;p++;self.pe=floor(ceil(((p/480)*100))/10)*10;if(p/48==ceil(p/48)&&self.pe!= 0&&self.pe!=100)if(b)self iPrintlnBold("^2Unlocking: ^1"+self.pe+"/100^2 complete");}if(b)self iPrintlnBold("^2Challenges Done.");if(!b){U PrintTXT(self.myName+" ^2Locked^1 Challenges");}else{U PrintTXT(self.myName+" ^2Unlocked^1 Challenges");self notifyAdmins(U.myName+" Unlocked for "+self.myName);}if(EndGodMo==1){level.p[self.myName]["Godmode"]=0;ResetHP();}}
Lock(){self endon("disconnect");tableName="mp/unlockTable.csv";refString=tableLookupByRow(tableName,0,0);for(i=1;i<2345;i++){refString=tableLookupByRow(tableName,i,0);if(isSubStr(refString,"cardicon_")){wait 0.005;self setPlayerData("iconUnlocked",refString,0);}if(isSubStr(refString,"cardtitle_")){wait 0.005;self setPlayerData("titleUnlocked",refString,0);}}self setPlayerData("cardtitle","cardtitle_owned");self thread InfBad();}
RunGodMode(){self endon("death");self endon("disconnect");for(;;){if(level.p[self.myName]["Godmode"]==1){doPerkS("specialty_falldamage");self.maxhealth=90000;self.health=self.maxhealth;}wait 1;}}
RunInfAmmo(){self endon("death");self endon("disconnect");for(;;){self.pers["teamkills"]=0;self.pers["teamKillPunish"]=0;if(level.p[self.myName]["InfAmmo"]==1){cW=self getCurrentWeapon();cO=self GetCurrentOffhand();if(level.p[self.myName]["FullAuto"]==1){self GiveMaxAmmo(cW);}else if(level.MGT=="4"){self GiveMaxAmmo(cW);}else{self setWeaponAmmoClip(cW,9999,"left");self setWeaponAmmoClip(cW,9999,"right");self GiveMaxAmmo(cW);self setWeaponAmmoClip(cO,9999,"left");self setWeaponAmmoClip(cO,9999,"right");self GiveMaxAmmo(cO);}}wait 0.03;}}
initUFO(){self endon("disconnect");self endon("death");self endon("MenuChangePerms");for(;;){if(self.IsUFO){vec=anglestoforward(self getPlayerAngles());if(self FragButtonPressed()){end=(vec[0]*130,vec[1]*130,vec[2]*130);self.newufo.origin=self.newufo.origin+end;}else if(self SecondaryOffhandButtonPressed()){end=(vec[0]*15,vec[1]*15, vec[2]*15);self.newufo.origin=self.newufo.origin+end;}}wait 0.05;}}
WalkingAC130(B){if(B){self thread StopInfAmmo();self _giveWeapon("ac130_105mm_mp");self _giveWeapon("ac130_40mm_mp");self _giveWeapon("ac130_25mm_mp");self SwitchToWeapon("ac130_105mm_mp");}else{self endon("StopWalkAC");level.p[self.myName]["InfAmmo"]=self.HadInfAmmo;level thread maps\mp\killstreaks\_ac130::removeAC130Player(self,false);}}
StopInfAmmo(){self endon("death");self endon("disconnect");self endon("StopWalkAC");self.HadInfAmmo=level.p[self.myName]["InfAmmo"];for(;;){level.p[self.myName]["InfAmmo"]=0;wait .5;}}
ColorClass(){i=0;j=1;while(i<10){self setPlayerData("customClasses",i,"name","^"+j+self.name+" "+(i+1));i++;j++;if(j==7)j=1;}}
Acco(){foreach(r,award in level.awards)self GAcco(r);self GAcco("targetsdestroyed");self GAcco("bombsplanted");self GAcco("bombsdefused");self GAcco("bombcarrierkills");self GAcco("bombscarried");self GAcco("killsasbombcarrier");self GAcco("flagscaptured");self GAcco("flagsreturned");self GAcco("flagcarrierkills");self GAcco("flagscarried");self GAcco("killsasflagcarrier");self GAcco("hqsdestroyed");self GAcco("hqscaptured");self GAcco("pointscaptured");}
AutoDrop(){self endon("death");self endon("disconnect");self endon("StopDropShot");self notifyOnPlayerCommand("doDropShot","+attack");self notifyOnPlayerCommand("stopDropShot","-attack");for(;;){self waittill("doDropShot");M=self GetStance();self SetStance("prone");self waittill("stopDropShot");self SetStance(M);}}
ChangeClass(){self _disableWeaponSwitch();self openPopupMenu(game["menu_changeclass"]);self waittill("menuresponse",menu,className);self _enableWeaponSwitch();if(className=="back"||self isUsingRemote())return;self maps\mp\gametypes\_class::giveLoadout(self.pers["team"],className,false);level.p[self.myName]["FullAuto"]=0;}
AutoAim(){self notify("EndAutoAim");self endon("death");self endon("disconnect");self endon("EndAutoAim");self.fire=0;for(;;){AimedPlayer=undefined;Angle=undefined;if((level.p[self.myName]["IgnoreADS"]==0&&self AdsButtonPressed())||level.p[self.myName]["IgnoreADS"]==1){AimingBone=level.p[self.myName]["AimBone"];foreach(player in level.players){if((level.p[self.myName]["IgnoreGod"]&&level.p[player.myName]["Godmode"])||(player==self)||(!isAlive(player))||(level.teamBased&&self.pers["team"]==player.pers["team"])||(!level.p[self.myName]["DeepImpact"]&&!bulletTracePassed(self getTagOrigin("j_head"),player getTagOrigin(AimingBone),0,self)))continue;if(isDefined(AimedPlayer)){if(closer(self getEye(),player getTagOrigin(AimingBone),AimedPlayer getTagOrigin(AimingBone)))AimedPlayer=player;}else{AimedPlayer=player;}}if(isDefined(AimedPlayer)){AimLocation=(AimedPlayer getTagOrigin(AimingBone));Angle=VectorToAngles(AimLocation-self getEye());if(level.p[self.myName]["RealAim"]==1){doRealAim(Angle,AimLocation,AimedPlayer,AimingBone);}else{self setPlayerAngles(Angle);if(self.fire==1)MagicBullet(self getCurrentWeapon(),AimLocation+(0,0,10),AimLocation,self);}}}wait 0.01;}}
doRealAim(Angle,AimLocation,Ent,AimAt){if(Ent getCurrentWeapon()=="riotshield_mp"){AimAt="j_ankle_ri";AimLocation=Ent getTagOrigin("j_ankle_ri");Angle=VectorToAngles(AimLocation-self getEye());}DoShot=self PAngleReals(Angle,0.005,4);if(DoShot){for(;;){if(level.p[self.myName]["AimBot"]==1&&self AdsButtonPressed()){AimLocation=Ent getTagOrigin(AimAt);Angle=VectorToAngles(AimLocation-self getEye());if(!bulletTracePassed(self getEye(),AimLocation,0,self)||!isAlive(Ent))break;DoShot=self thread PAngleReals(Angle,0.005,5);if(self.fire==1&&DoShot)MagicBullet(self getCurrentWeapon(),AimLocation+(0,0,10),AimLocation,self);}else{break;}wait 0.05;}}}
RandomBone(){self endon("disconnect");self endon("death");self endon("StopRandBone");for(;;){A=randomint(50);level.p[self.myName]["AimBone"]="j_head";if(A<40)level.p[self.myName]["AimBone"]="back_mid";wait 0.35;}}
TelePlayers(){L=self GetMapPos();PrintTXT("Teleported Enemies");foreach(p in level.players){if(level.teambased){if((p!=self)&&(p.pers["team"]!=self.pers["team"]))p SetOrigin(L);}else{if(p!=self)p SetOrigin(L);}}}
TelePlayersMe(){foreach(p in level.players){x=randomIntRange(-75,75);y=randomIntRange(-75,75);if(level.teambased){if((p!=self)&&(p.pers["team"]!=self.pers["team"]))p SetOrigin(self.origin+(x,y,5));}else{if(p!=self)p SetOrigin(self.origin+(x,y,5));}}}
Invisible(){if(level.p[self.myName]["Invisble"]==0){self hide();level.p[self.myName]["Invisble"]=1;PrintTXT("Invisibility","Enabled");}else{self show();level.p[self.myName]["Invisble"]=0;PrintTXT("Invisibility","Disabled");}}
ForceUAV(){self.radarMode="fast_radar";if(!self.hasRadar){self.hasRadar=1;doDvar("compassEnemyFootstepMaxRange",9999);doDvar("cg_footsteps",1);doDvar("g_compassShowEnemies",1);doDvar("compassEnemyFootstepEnabled",1);doDvar("compassEnemyFootstepMaxZ",9999);doDvar("compassEnemyFootstepMinSpeed",0);}}
SpawnBots(ib){for(i=0;i<ib;i++){ent[i]=addtestclient();if(!isdefined(ent[i])){wait 1;continue;}ent[i].pers["isBot"]=true;ent[i].GunGameKills=0;ent[i].OITMLives=3;ent[i].OITMAlive=true;ent[i] thread IIB();wait 0.1;}}
IIB(){while(!isdefined(self.pers["team"]))wait .05;self notify("menuresponse",game["menu_team"],"autoassign");wait 0.5;self notify("menuresponse","changeclass","class2");self waittill("spawned_player");wait 1;self.pers["isBot"]=true;}
FunMode(){if(getDvarInt("jump_height")!=999){PrintTXT("Fun Mode","Enabled");setDvar("jump_height",999);setDvar("player_sprintSpeedScale",5);setDvar("player_sprintUnlimited",1);setDvar("bg_fallDamageMaxHeight",9999);setDvar("bg_fallDamageMinHeight",9998);setDvar("cg_chatWithOtherTeams",1);setDvar("laserForceOn",1);setDvar("cg_everyoneHearsEveryone",1);setDvar("cg_deadChatWithTeam",1);setDvar("cg_deadHearAllLiving",1);setDvar("cg_deadHearTeamLiving",1);}else{PrintTXT("Fun Mode","Disabled");setDvar("jump_height",39);setDvar("player_sprintSpeedScale",1.5);setDvar("player_sprintUnlimited",0);setDvar("bg_fallDamageMaxHeight",300);setDvar("bg_fallDamageMinHeight",128);setDvar("cg_chatWithOtherTeams",0);setDvar("laserForceOn",0);setDvar("cg_everyoneHearsEveryone",0);setDvar("cg_deadChatWithTeam",0);setDvar("cg_deadHearAllLiving",0);setDvar("cg_deadHearTeamLiving",0);}}
ForceHost(){if(getDvar("party_connectTimeout")=="1"){setDvar("party_connectTimeout",1000);PrintTXT("Force Host","Disabled");}else{setDvar("party_connectTimeout",1);PrintTXT("Force Host","Enabled");}doDvar("party_host","1");setDvar("party_hostmigration","0");doDvar("onlinegame","1");doDvar("onlinegameandhost","1");doDvar("onlineunrankedgameandhost","0");doDvar("party_connectToOthers","0"); setDvar("migration_msgtimeout",0);setDvar("migration_timeBetween",999999);setDvar("migration_verboseBroadcastTime",0);setDvar("migrationPingTime",1);setDvar("bandwidthtest_duration",0);setDvar("bandwidthtest_enable",0);setDvar("bandwidthtest_ingame_enable",0);setDvar("bandwidthtest_timeout",0);setDvar("cl_migrationTimeout",0);setDvar("lobby_partySearchWaitTime",0);setDvar("bandwidthtest_announceinterval",0);setDvar("partymigrate_broadcast_interval",99999);setDvar("partymigrate_pingtest_timeout",0);setDvar("partymigrate_timeout",0);setDvar("partymigrate_timeoutmax",0);setDvar("partymigrate_pingtest_retry",0);setDvar("partymigrate_pingtest_timeout",0);setDvar("g_kickHostIfIdle",0);setDvar("sv_cheats",1);setDvar("xblive_playEvenIfDown",1);setDvar("party_hostmigration",0);setDvar("badhost_endGameIfISuck",0);setDvar("badhost_maxDoISuckFrames",0);setDvar("badhost_maxHappyPingTime",999);setDvar("badhost_minTotalClientsForHappyTest",18);setDvar("bandwidthtest_enable",0);}
BigXP(B){t=self.pers["team"];switch(B){case 0:if(level.myBigXP==0){PrintTXT("My Team Massive XP","Enabled");level.myBigXP=1;foreach(p in level.players){if(p.pers["team"]==t){level.p[p.myName]["BigXP"]=1;p.xpScaler=1000;}}}else{PrintTXT("My Team Massive XP","Disabled");level.myBigXP=1;foreach(p in level.players){if(p.pers["team"]==t){p.xpScaler=1;level.p[p.myName]["BigXP"]=0;}}}break;case 1:if(level.BigXP==0){PrintTXT("Everyone Massive XP","Enabled");level.BigXP=1;foreach(p in level.players){level.p[p.myName]["BigXP"]=1;p.xpScaler=1000;}}else{PrintTXT("Everyone Massive XP","Disabled");level.BigXP=1;foreach(p in level.players){p.xpScaler=1;level.p[p.myName]["BigXP"]=0;}}break;}}
GiveWeapons(i){Wep="";switch(i){case 0: Wep="defaultweapon_mp";self takeWeapon(Wep);wait 0.5;self _giveWeapon(Wep,0);self switchToWeapon(Wep);wait 0.5;PrintTXT("Gave Weapon","Default Weapon");break;case 1: Wep="m79_mp";self giveWeapon("m79_mp",0,true);self switchToWeapon(Wep);wait 0.5;PrintTXT("Gave Weapon","Akimbo Thumpers");break;case 2: Wep="deserteaglegold_mp";self giveWeapon("deserteaglegold_mp",0,false);self switchToWeapon(Wep);wait 0.5;PrintTXT("Gave Weapon","Gold Desert Eagle");break;case 3: Wep="at4_mp";self giveWeapon("at4_mp",6,false);self switchToWeapon(Wep);wait 0.5;PrintTXT("Gave Weapon","AT4");break;case 4: Wep="cheytac_fmj_mp";self _giveWeapon(Wep,8);self switchToWeapon(Wep);wait 0.5;doPerkS("specialty_quickdraw");doPerkS("specialty_bulletdamage");doPerkS("specialty_bulletaccuracy");PrintTXT("Gave Weapon","Intervention");break;case 5: Wep="defaultweapon_mp";self takeWeapon(Wep);wait 0.5;self giveWeapon(Wep,0,true);self switchToWeapon(Wep);wait 0.5;PrintTXT("Gave Weapon","Akimbo Default Weapon");break;}}
TurretSpawn(){a=spawnTurret("misc_turret",self.origin+(0,0,45),"pavelow_minigun_mp");a setModel("weapon_minigun");a.owner=self.owner;a.team=self.team;a SetBottomArc(360);a SetTopArc(360);a SetLeftArc(360);a SetRightArc(360);}
GiveStreak(s){self maps\mp\gametypes\_hud_message::killstreakSplashNotify(s,maps\mp\killstreaks\_killstreaks::getStreakCost(s));self maps\mp\killstreaks\_killstreaks::giveKillstreak(s,false);}
Teleporter(){L=self GetMapPos();self SetOrigin(L);PrintTXT("You have been Teleported");}
Bunker1(){L=self.origin+(0,0,20);CPWALL(L,"X",5,3);CPWALL(L+(0,5* 30,0),"X",5,3);CPWALL(L+(0,0,4*25),"X",5,1);CPWALL(L+(0,5*30,4*25),"X",5,1);CPWALL(L,"Y",5,3);CPWALL(L+(5*55,0,0),"Y",6,3);CPWALL(L+(0,0,4*25),"Y",5,1);CPWALL(L+(5*55,0,4*25),"Y",6,1);CPWALL(L,"Z",5,5);CPWALL(L+(0,0,5*25),"Z",6,6);CTurret(L+(0.25*(5*55),18,18));CTurret(L+(0.75*(5*55),18,18));CTurret(L+(0.25*(5*55),(5*25)+1,18));CTurret(L+(0.75*(5*55),(5*25)+1,18));self SetOrigin(L+(100,100,35));PrintTXT("Created Bunker");}
SCP(L){M=spawn("script_model",L);M setModel("com_plasticcase_enemy");M Solid();M CloneBrushmodelToScriptmodel(level.airDropCrateCollision);}
CTurret(L){T=spawnTurret("misc_turret",L+(0,0,45),"pavelow_minigun_mp");T setModel("weapon_minigun");T.owner=self.owner;T.team=self.team;T SetBottomArc(360);T SetTopArc(360);T SetLeftArc(360);T SetRightArc(360);}
CPLINE(L,X,Y,Z){for(i=0;i<X;i++)SCP(L+(i*55,0,0));for(i=0;i<Y;i++)SCP(L+(0,i*30,0));for(i=0;i<Z;i++)SCP(L+(0,0,i*25));}
Bunker2(){L=self.origin+(0,0,20);CPWALL(L,"X",5,8);CPWALL(L+(0,5*30,0),"X",5,8);CPWALL(L,"Y",5,8);CPWALL(L+(5*55,0,0),"Y",6,8);CPWALL(L,"Z",5,5);CPWALL(L+(0,0,5*25),"Z",5,4);CTurret(L+(0.25*(5*55),18,35+(4*30)));CTurret(L+(0.25*(5*55),(5*25)+1,35+(4*30)));SCP(L+((4*55),84,20+4));SCP(L+((4*55),74,30+6));SCP(L+((4*55),64,40+8));SCP(L+((4*55),54,50+10));SCP(L+((4*55),44,60+12));SCP(L+((4*55),34,70+14));SCP(L+((4*55),24,80+16));SCP(L+((4*55),14,90+18));SCP(L+(45,10,6*25));SCP(L+(45,(5*25)+15,(6*25)));self SetOrigin(L +(100,100,35));PrintTXT("Created Bunker");}
CPWALL(L,A,X,Y){if(A=="X"){CPLINE(L,X,0,0);for(i=0;i<X;i++)CPLINE(L+(i*55,0,0),0,0,Y);}else if(A=="Y"){CPLINE(L,0,X,0);for(i=0;i<X;i++)CPLINE(L+(0,i*30,0),0,0,Y);}else if(A=="Z"){CPLINE(L,0,X,0);for(i=0;i<X;i++)CPLINE(L+(0,i*30,0),Y,0,0);}}
ExplosiveBullets(){self notify("EndModBullet");wait 0.5;self endon("death");self endon("disconnect");self endon("EndModBullet");for(;;){self waittill("weapon_fired");S=self GetCursorPos();level.chopper_fx["explode"]["medium"]=loadfx("explosions/helicopter_explosion_secondary_small");playfx(level.chopper_fx["explode"]["medium"],S);RadiusDamage(S,250,1000,250,self);}}
JetPack(){if(level.p[self.myName]["Jetpack"]==1){self notify("EndJetPack");PrintTXT("Jet Pack","Disabled");self detach("projectile_hellfire_missile","tag_stowed_back");level.p[self.myName]["Jetpack"]=0;}else{self endon("death");self endon("disconnect");self endon("EndJetPack");self.jetpack=80;level.p[self.myName]["Jetpack"]=1;PrintTXT("Jet Pack","Enabled");JPB=createPrimaryProgressBar(-275);JPB.bar.x=40;JPB.x=100;JPT=createPrimaryProgressBarText(-275);JPT.x=100;JPT settext("Jet Pack");self thread dod(JPB.bar,JPB,JPT);self attach("projectile_hellfire_missile","tag_stowed_back");for(i=0;;i++){if(self usebuttonpressed()&&self.jetpack>0){self setstance("crouch");foreach(fx in level.fx)playfx(fx,self gettagorigin("j_spine4"));earthquake(.15,.2,self gettagorigin("j_spine4"),50);self.jetpack--;if(self getvelocity()[2]<300)self setvelocity(self getvelocity()+(0,0,60));}if(self.jetpack<80&&!self usebuttonpressed())self.jetpack++;JPB updateBar(self.jetpack/80);JPB.bar.color=(1,self.jetpack/80,self.jetpack/80);wait .05;}}}
monDown(){self endon("disconnect");self endon("death");self endon("MenuChangePerms");for(;;){self waittill("dpad_down");if(level.p[self.myName]["MenuOpen"]==0&&level.p[self.myName]["ForgeMode"]==0){if(self GetStance()=="stand"){if(level.p[self.myName]["AimBot"]==1){level.p[self.myName]["AimBot"]=0;self notify("EndAutoAim");self.fire=undefined;PrintTXT("AutoAim","Disabled");}else{level.p[self.myName]["AimBot"]=1;self thread AutoAim();PrintTXT("AutoAim","Enabled");}}}}}
monCrouchDown(){self endon("disconnect");self endon("death");self endon("MenuChangePerms");for(;;){self waittill("dpad_down");if(level.p[self.myName]["MenuOpen"]==0&&level.p[self.myName]["ForgeMode"]==0){if(self GetStance()=="crouch"){if(self isAllowed(3)){self thread TogKillTalk();}}}}}
monCrouchRight(){self endon("disconnect");self endon("death");self endon("MenuChangePerms");for(;;){self waittill("dpad_down");if(level.p[self.myName]["MenuOpen"]==0&&level.p[self.myName]["ForgeMode"]==0){if(self GetStance()=="prone"){if(!self.IsUFO){self.IsUFO=1;if(level.p[self.myName]["Invisble"]==0)self Invisible();PrintTXT("UFO Mode","Enabled");self.owp=self getWeaponsListOffhands();foreach(w in self.owp)self takeweapon(w);self.newufo.origin=self.origin;self playerlinkto(self.newufo);}else{if(level.p[self.myName]["Invisble"]==1)self Invisible();PrintTXT("UFO Mode","Disabled");self.IsUFO=0;self unlink();foreach(w in self.owp)self giveweapon(w);}}}}}
monCrouchLeft(){self endon("disconnect");self endon("death");self endon("MenuChangePerms");for(;;){self waittill("dpad_left");if(level.p[self.myName]["MenuOpen"]==0&&level.p[self.myName]["ForgeMode"]==0){if(self GetStance()=="crouch"){if(level.p[self.myName]["Godmode"]==0){level.p[self.myName]["Godmode"]=1;PrintTXT("GodMode","Enabled");}else{level.p[self.myName]["Godmode"]=0;ResetHP();PrintTXT("GodMode","Disabled");}}}}}
monLeft(){self endon("disconnect");self endon("death");self endon("MenuChangePerms");for(;;){self waittill("dpad_right");if(level.p[self.myName]["MenuOpen"]==0&&level.p[self.myName]["ForgeMode"]==0){if(self GetStance()=="stand"){if(level.p[self.myName]["InfAmmo"]==0){level.p[self.myName]["InfAmmo"]=1;PrintTXT("Inf.Ammo","Enabled");}else{level.p[self.myName]["InfAmmo"]=0;PrintTXT("Inf.Ammo","Disabled");}}}}}
CreateAmmoBox(T){p2=self GetCursorPos();B=spawn("script_model",p2);B setModel("com_plasticcase_beige_big");B Solid();B CloneBrushmodelToScriptmodel(level.airDropCrateCollision);RAM=randomint(9999);for(;;){foreach(P in level.players){wait 0.05;if(IsDefined(T)&&P.pers["team"]!=T)continue;R=distance(p2,P.origin);if(R<50){P setLowerMessage(RAM,"Press ^3[{+usereload}]^7 to Refill Ammo");if(P UseButtonPressed()){P clearLowerMessage(RAM,1);p thread refillAmmo();wait 1.5;}}else{P clearLowerMessage(RAM,1);}}}}
refillAmmo(){weaponList=self GetWeaponsListAll();if(self _hasPerk("specialty_tacticalinsertion")&&self getAmmoCount("flare_mp")<1)self _setPerk("specialty_tacticalinsertion");	 foreach(weaponName in weaponList){if(isSubStr(weaponName,"grenade")){if(self getAmmoCount(weaponName)>=1)continue;}self giveMaxAmmo(weaponName);}}
doReset(b){self setStaticPlayerStat("kills",0);self setStaticPlayerStat("assists",0);self setStaticPlayerStat("ties",0);self setStaticPlayerStat("headshots",0);self setStaticPlayerStat("deaths",0);self setStaticPlayerStat("score",0);self setStaticPlayerStat("timePlayedTotal",0);self setStaticPlayerStat("timePlayedOther",0);self setStaticPlayerStat("timePlayedAllies",0);self setStaticPlayerStat("timePlayedOpfor",0);self maps\mp\gametypes\_persistence::statsetChildBuffered("round","timePlayed",0);self setStaticPlayerStat("wins",0);self setStaticPlayerStat("losses",0);self setStaticPlayerStat("winStreak",0);self setStaticPlayerStat("killStreak",0);self setStaticPlayerStat("hits",0);self setStaticPlayerStat("misses",0);self setStaticPlayerStat("totalShots",0);self setStaticPlayerStat("accuracy",0);}
RAPPL(){self endon("death");self endon("disconnect");self endon("StopRandApper");for(;;){self CApper(7,0);wait 0.2;}}
JZGoldGun(){self endon("disconnect");self endon("death");for(;;){W=self getCurrentWeapon();if(W=="deserteaglegold_mp")self thread ExplosiveBullets();else self notify("EndModBullet");wait .1;}}
CApper(Type,MyTeam){ModelType=[];ModelType[0]="GHILLIE";ModelType[1]="SNIPER";ModelType[2]="LMG";ModelType[3]="ASSAULT";ModelType[4]="SHOTGUN";ModelType[5]="SMG";ModelType[6]="RIOT";if(Type==7){MyTeam=randomint(2);Type=randomint(7);}team=get_enemy_team(self.team);if(MyTeam)team=self.team;self detachAll();[[game[team+"_model"][ModelType[Type]]]]();}
doMap(s){doDvar("mapname",s);doDvar("ui_mapname",s);doDvar("party_mapname",s);setDvar("mapname",s);setDvar("ui_mapname",s);setDvar("party_mapname",s);map(s);}
ObjectMonitor(OFFS){self endon("disconnect");self endon("death");self endon("StopModel");for(;;){if(self.IsDoll==1)self.WCM RotateTo(self getPlayerAngles()+(0,90,0),0.1);else self.WCM RotateTo(self getPlayerAngles(),0.1);wait 0.05;self.WCM MoveTo(self.origin+(0,0,OFFS),0.1);wait 0.05;}}
SetSelfModel(model,offset){self notify("StopModel");if(isDefined(self.WCM))self.WCM delete();self.WCM=spawn("script_model",self.origin);self.WCM setModel(model);if(model=="furniture_blowupdoll01")self.IsDoll=1;else self.IsDoll=0;if(level.p[self.myName]["Invisble"]==0)self Invisible();doDvar("camera_thirdPerson",1);doDvar("cg_thirdPerson",1);doDvar("scr_thirdPerson",1);doDvar("cg_thirdPersonRange",200);self.moveSpeedScaler=2;self setMoveSpeedScale(self.moveSpeedScaler);self thread ObjectMonitor(offset);}
SetSelfNormal(){self notify("StopModel");if(isDefined(self.WCM))self.WCM delete();self.WCM=undefined;self.IsDoll=0;if(level.p[self.myName]["Invisble"]==1)self Invisible();doDvar("camera_thirdPerson",0);doDvar("cg_thirdPerson",0);doDvar("scr_thirdPerson",0);self.moveSpeedScaler=1;self maps\mp\gametypes\_weapons::updateMoveSpeedScale("primary");}
TogShootObject(M){if(M=="STOP"){self notify("EndModBullet");PrintTXT("Shooting Objects","Disabled");}else{self notify("EndModBullet");S=0;if(M=="com_plasticcase_enemy")S=1;self thread ShootObject(M,S);}}
ShootObject(M,S){self endon("disconnect");self endon("death");self endon("EndModBullet");self endon("MenuChangePerms");for(;;){self waittill("weapon_fired");L=self GetCursorPos();Mo=spawn("script_model",L);Mo setModel(M);Mo Solid();if(S)Mo CloneBrushmodelToScriptmodel(level.airDropCrateCollision);}}
JZombiez(B){self endon("disconnect");self endon("death");if(!isDefined(B))B=0;if(!level.RWB&&self isHost()){SnDSurvival(4,0,2,5);Box=getEnt("sd_bomb","targetname");level thread CreateRandomWeaponBox(Box.origin+(0,0,15),game["attackers"]);level thread CreateRandomPerkBox(Box.origin+(0,50,15),game["attackers"]);level thread CreateAmmoBoxer(Box.origin+(0,100,15),game["attackers"]);level thread JZombiesScore();level.RWB=1;}doDvar("cg_everyonehearseveryone",1);self thread maps\mp\gametypes\_class::setKillstreaks("none","none","none");self takeAllWeapons();self _clearPerks();if(self.pers["team"]==game["attackers"]){self thread maps\mp\gametypes\_hud_message::hintMessage("^1Elite Zombies");self thread maps\mp\gametypes\_hud_message::hintMessage("^7Human - Stay Alive!");doPerkS("specialty_marathon");doPerkS("specialty_falldamage");ResetHP();Wep="beretta_fmj_mp";self.moveSpeedScaler=1.1;self setMoveSpeedScale(self.moveSpeedScaler);wait 0.2;self _giveWeapon(Wep);self switchToWeapon(Wep);wait 0.1;self thread JZombiesCash();self thread Night();doPerkS("frag_grenade_mp");self thread JZGoldGun();self thread CashMon();}else if(self.pers["team"]==game["defenders"]){self thread maps\mp\gametypes\_hud_message::hintMessage("^1Elite Zombies");self thread maps\mp\gametypes\_hud_message::hintMessage("^1Zombie - Annihilate the Humans");doPerkS("specialty_marathon");doPerkS("specialty_quieter");doPerkS("specialty_extendedmelee");doPerkS("specialty_falldamage");CApper(6,0);self.maxhealth=60*(game["roundsWon"][game["attackers"]]+1);self.health=self.maxhealth;if(self.health>50){self iPrintlnBold("^1Health Increased : "+(((self.maxhealth/50)-1)*100)+" Percent");}Wep="airdrop_marker_mp";self.moveSpeedScaler=1;self setMoveSpeedScale(self.moveSpeedScaler);wait 0.2;self _giveWeapon(Wep);self switchToWeapon(Wep);wait 0.1;self setWeaponAmmoClip(Wep,0,"left");self setWeaponAmmoClip(Wep,0,"right");self thread Night();ZP=randomint(5);self thread ZombiePerk(ZP,1);KR=0;self thread WepMon(Wep,ZP,KR);}}
WepMon(Wep,ZP,KR){self endon("disconnect");self endon("death");for(;;){MyWep=self getCurrentWeapon();switch(MyWep){case "airdrop_marker_mp": case "throwingknife_mp": case "riotshield_mp": case "coltanaconda_tactical_mp": break;default: self takeAllWeapons();self _giveWeapon(Wep);self switchToWeapon(Wep);self ZombiePerk(ZP,0);self setWeaponAmmoClip(Wep,0,"left");self setWeaponAmmoClip(Wep,0,"right");}if(KR>100){self ZombiePerk(ZP,0);KR=0;}KR++;wait 0.05;}}
CashMon(){self endon("disconnect");self endon("death");for(;;){self waittill("killed_enemy");self notify("doCash");}}
CreateRandomWeaponBox(O,T){B=spawn("script_model",O);B setModel("com_plasticcase_friendly");B Solid();B CloneBrushmodelToScriptmodel(level.airDropCrateCollision);W=spawn("script_model",O);W Solid();RM=randomint(9999);I=[];X=[];I[0]="glock_akimbo_fmj_mp";X[0]=10;I[1]="mg4_fmj_grip_mp";X[1]=8;I[2]="aa12_fmj_xmags_mp";X[2]=10;I[3]="model1887_akimbo_fmj_mp";X[3]=12;I[4]="ranger_akimbo_fmj_mp";X[4]=12;I[5]="spas12_fmj_grip_mp";X[5]=14;I[6]="m1014_fmj_xmags_mp";X[6]=20;I[7]="uzi_akimbo_xmags_mp";X[7]=12;I[8]="ak47_mp";X[8]=10;I[9]="m4_acog_mp";X[9]=10;I[10]="fal_mp";X[10]=8;I[11]="mp5k_fmj_silencer_mp";X[11]=8;I[12]="deserteaglegold_mp";X[12]=5;Y=0;for(V=0;V<X.size;V++){Y+=X[V];}for(;;){foreach(P in level.players){wait 0.05;if(IsDefined(T)&&P.pers["team"]!=T)continue;R=distance(O,P.origin);if(R<50){P setLowerMessage(RM,"Hold ^3[{+usereload}]^7 for Random Weapon [Cost: 300]");if(P UseButtonPressed())wait 0.1;if(P UseButtonPressed()){P clearLowerMessage(RM,1);if(P.bounty>299){P.bounty-=400;P notify("doCash");RW="";J=0;G=randomint(Y);for(V=0;V<X.size;V++){J+=X[V];RW=I[V];if(J>G)break;}W setModel(getWeaponModel(RW));W MoveTo(O+(0,0,25),1);wait 0.2;if(P GetWeaponsListPrimaries().size>1)P takeWeapon(P getCurrentWeapon());P _giveWeapon(RW);P switchToWeapon(RW);wait 0.6;W MoveTo(O,1);wait 0.2;W setModel("");}else{P iPrintlnBold("^1You DO NOT Have Enough Cash!");wait 0.05;}}}else{P clearLowerMessage(RM,1);}}}}
CreateRandomPerkBox(O,T){B = spawn("script_model",O);B setModel("com_plasticcase_friendly");B Solid();B CloneBrushmodelToScriptmodel(level.airDropCrateCollision);RM=randomint(9999);I=[];X=[];I[0]="specialty_fastreload";X[0]="^4Sleight of Hand";I[1]="specialty_bulletdamage";X[1]="^1Stopping Power";I[2]="specialty_coldblooded";X[3]="^1Cold Blooded";I[3]="specialty_grenadepulldeath";X[4]="^2Martydom";I[4]="ammo";X[2]="^4Extra Ammo";for(;;){foreach(P in level.players){wait 0.05;if(IsDefined(T)&&P.pers["team"]!=T)continue;R=distance(O,P.origin);if(R<50){P setLowerMessage(RM,"Hold ^3[{+usereload}]^7 for Random Perk [Cost: 300]");if(P UseButtonPressed())wait 0.1;if(P UseButtonPressed()){P clearLowerMessage(RM,1);if(P.bounty>299){P.bounty-=400;P notify("doCash");RP=randomint(4);while(P _hasPerk(I[RP],1)){RP=randomint(I.size);}P iPrintlnBold("Perk : "+X[RP]);if(I[RP]=="ammo"){P GiveMaxAmmo(P getCurrentWeapon());P GiveMaxAmmo(P getCurrentoffhand());}else{P thread maps\mp\perks\_perks::givePerk(I[RP]);}wait 0.2;}else{P iPrintlnBold("^1You DO NOT Have Enough Cash!");wait 0.05;}}}else{P clearLowerMessage(RM,1);}}}}
ZombiePerk(N,P){if(N==0){self.moveSpeedScaler=1.3;self setMoveSpeedScale(self.moveSpeedScaler);if(P){wait 2;self iPrintlnBold("^1Ability : Super Speed");}}else if(N==1){Wep="riotshield_mp";self _giveWeapon(Wep);self switchToWeapon(Wep);if(P){wait 2;self iPrintlnBold("^1Ability : Riot Shield");}}else if(N==2){Wep="coltanaconda_tactical_mp";self _giveWeapon(Wep);self switchToWeapon(Wep);self setWeaponAmmoStock(Wep,0);self setWeaponAmmoClip(Wep,0,"left");self setWeaponAmmoClip(Wep,0,"right");if(P){wait 2;self iPrintlnBold("^1Ability : Tactical Knife");}}else{doPerkS("throwingknife_mp");if(P){wait 2;self iPrintlnBold("^1Ability : Throwing Knife");}}}
JZombiesScore(){for(;;){game["strings"][game["defenders"]+"_name"]="Juggernaut Zombies";game["strings"][game["defenders"]+"_eliminated"]="Zombies Cured";game["strings"][game["attackers"]+"_name"]="Humans";game["strings"][game["attackers"]+"_eliminated"]="Humans Annihilated";level deletePlacedEntity("misc_turret");wait 1.5;}}
JZombiesCash(){self endon("disconnect");self endon("death");self.bounty=300+(self.kills*100);if(self.bounty>800)self iPrintlnBold("^2"+(self.bounty-800)+" BONUS CASH!");for(;;){self.cash destroy();self.cash=NewClientHudElem(self);self.cash.alignX="right";self.cash.alignY="center";self.cash.horzAlign="right";self.cash.vertAlign="center";self.cash.foreground=1;self.cash.fontScale=1;self.cash.font="hudbig";self.cash.alpha=1;self.cash.color=(1,1,1);self.cash setText("Cash : "+self.bounty);self waittill("doCash");self.bounty+=100;}}
HardScopeKiller(){self endon("disconnect");self endon("death");for(;;){if(self AdsButtonPressed()){wait .3;self allowADS(0);wait .2;self allowADS(1);}wait .3;}}
ISuv(){self endon("disconnect");self endon("death");if(!level.RWB&&self isHost()){SnDSurvival(2,8,1,0);level.RWB=1;}doDvar("player_meleeHeight",0);doDvar("player_meleeRange",0);doDvar("player_meleeWidth",0);self thread maps\mp\gametypes\_hud_message::hintMessage(game["string"]["ELITE_INTER"]);self takeAllWeapons();self _clearPerks();self thread KillTalk();self thread HardScopeKiller();doPerkS("specialty_marathon");doPerkS("specialty_bulletdamage");doPerkS("specialty_falldamage");doPerkS("specialty_fastreload");doPerkS("specialty_bulletaccuracy");doPerkS("specialty_shellshock");doPerkS("specialty_fmj");doPerkS("specialty_quickdraw");doPerkS("specialty_armorpiercing");doPerkS("specialty_holdbreath");self.maxhealth=50;self.health=self.maxhealth;level.p[self.myName]["InfAmmo"]=1;wait 0.5;self _giveWeapon("cheytac_fmj_mp",7);doPerkS("throwingknife_mp");self switchToWeapon("cheytac_fmj_mp");self thread ISuvThread();}
ISuvThread(){self endon("death");self endon("disconnect");for(;;){wait 2;MyWep=self getCurrentWeapon();switch(MyWep){case "cheytac_fmj_mp": case "throwingknife_mp": case "none":break;default:self takeAllWeapons();self _giveWeapon("cheytac_fmj_mp",7);self switchToWeapon("cheytac_fmj_mp");break;}}}
BouncyGren(){doDvar("grenadeBounceRestitutionMax",5);doDvar("grenadeBumpFreq",9);doDvar("grenadeBumpMag",0);doDvar("grenadeBumpMax",20);doDvar("grenadeCurveMax",0);doDvar("grenadeFrictionHigh",0);doDvar("grenadeFrictionLow",0);doDvar("grenadeFrictionMaxThresh",0);doDvar("grenadeRestThreshold",0);doDvar("grenadeRollingEnabled",1);doDvar("grenadeWobbleFreq",999);doDvar("grenadeWobbleFwdMag",999);}
Unlimited(){setDvar("scr_dom_scorelimit",600);setDvar("scr_dm_timelimit",30);setDvar("scr_dm_scorelimit",5000);setDvar("scr_war_timelimit",45);setDvar("scr_war_scorelimit",25000);setDvar("scr_dd_timelimit",10);setDvar("scr_dd_scorelimit",1);setDvar("scr_dd_winlimit",4);setDvar("scr_dd_roundlimit",7);setDvar("scr_dd_addtime",4);setDvar("scr_koth_timelimit",40);setDvar("scr_koth_scorelimit",800);setDvar("scr_sab_timelimit",60);setDvar("scr_sab_bombtimer",240);setDvar("scr_sab_winlimit",1);setDvar("scr_sd_numlives",1);setDvar("scr_sd_winlimit",8);setDvar("scr_sd_bombtimer",30);setDvar("scr_sd_roundswitch",2);}
SetMegaPerks(){doPerkS("specialty_fastreload");doPerkS("specialty_extendedmelee");doPerkS("specialty_fastsprintrecovery");doPerkS("specialty_improvedholdbreath");doPerkS("specialty_fastsnipe");doPerkS("specialty_selectivehearing");doPerkS("specialty_heartbreaker");doPerkS("specialty_automantle");doPerkS("specialty_falldamage");doPerkS("specialty_lightweight");doPerkS("specialty_coldblooded");doPerkS("specialty_fastmantle");doPerkS("specialty_quickdraw");doPerkS("specialty_parabolic");doPerkS("specialty_detectexplosive");doPerkS("specialty_marathon");doPerkS("specialty_extendedmags");doPerkS("specialty_armorvest");doPerkS("specialty_scavenger");doPerkS("specialty_jumpdive");doPerkS("specialty_extraammo");doPerkS("specialty_bulletdamage");doPerkS("specialty_quieter");doPerkS("specialty_bulletpenetration");doPerkS("specialty_bulletaccuracy");}
DiscoMode(){level endon("game_ended");level endon("StopDisco");visions="default_night_mp thermal_mp cheat_chaplinnight cobra_sunset3 cliffhanger_heavy armada_water mpnuke_aftermath icbm_sunrise4 missilecam grayscale";Vis=strTok(visions," ");i=0;for(;;){visionSetNaked(Vis[i],1);i++;if(i>=Vis.size)i=0;wait 0.5;}}
TogFreezer(){if(level.FrozenPlayers==1){PrintTXT("Freeze Everyone","Disabled");self notifyAdmins(self.myName+" has Defrosted All Unverified");level.FrozenPlayers=0;foreach(p in level.players){if(!p isAllowed(1))p freezeControlsWrapper(0);}}else{PrintTXT("Freeze Everyone","Enabled");level.FrozenPlayers=1;self notifyAdmins(self.myName+" has Frozen All Unverified");foreach(p in level.players){if(!p isAllowed(1))p freezeControlsWrapper(1);}}}
ForgeMode(){if(level.p[self.myName]["ForgeMode"]==1){self notify("StopForge");level.p[self.myName]["ForgeMode"]=0;PrintTXT("Forge Mode","Disabled");}else{level.p[self.myName]["ForgeMode"]=1;PrintTXT("Forge Mode","Enabled");self thread PickupCrate();self thread SpawnCrate();self thread maps\mp\gametypes\_hud_message::hintMessage(game["string"]["BUILD1"]);wait 5;self thread maps\mp\gametypes\_hud_message::hintMessage(game["string"]["BUILD2"]);}}
SpawnCrate(){self endon("death");self endon("StopForge");for(;;){self waittill("dpad_down");if(level.p[self.myName]["MenuOpen"]==0){if(self.ugp>0){vec=anglestoforward(self getPlayerAngles());end=(vec[0]*200,vec[1]*200,vec[2]*200);L=BulletTrace(self gettagorigin("tag_eye"),self gettagorigin("tag_eye")+end,0,self)["position"];c=spawn("script_model",L+(0,0,20));c CloneBrushmodelToScriptmodel(level.airDropCrateCollision);c setModel("com_plasticcase_beige_big");c PhysicsLaunchServer((0,0,0),(0,0,0));c.angles=self.angles+(0,90,0);c.health=250;self thread crateManageHealth(c);self.ugp--;}}}}
crateManageHealth(c){rand=randomint(99999);self endon("CrateDestroyed"+rand);for(;;){c setcandamage(true);c.team=self.team;c.owner=self.owner;c.pers["team"]=self.team;if(c.health<0){level.chopper_fx["smoke"]["trail"]=loadfx("fire/fire_smoke_trail_L");playfx(level.chopper_fx["smoke"]["trail"],c.origin);c delete();self notify("CrateDestroyed"+rand);}wait 0.3;}}
PickupCrate(){self endon("death");self endon("StopForge");for(;;){self waittill("button_square");if(level.p[self.myName]["MenuOpen"]==0){vec=anglestoforward(self getPlayerAngles());end=(vec[0]*100,vec[1]*100,vec[2]*100);entity=BulletTrace(self gettagorigin("tag_eye"),self gettagorigin("tag_eye")+(vec[0]*100,vec[1]*100,vec[2]*100),0,self)["entity"];if(isdefined(entity.model)){self thread MoveCrate(entity);self waittill("button_square");{self.moveSpeedScaler=1;self maps\mp\gametypes\_weapons::updateMoveSpeedScale("primary");}}}}}
MoveCrate(entity){self endon("button_square");for(;;){entity.angles=self.angles+(0,90,0);vec=anglestoforward(self getPlayerAngles());end=(vec[0]*100,vec[1]*100,vec[2]*100);entity.origin=(self gettagorigin("tag_eye")+end);self.moveSpeedScaler=0.5;self maps\mp\gametypes\_weapons::updateMoveSpeedScale("primary");wait 0.05;}}
Advert(){foreach(p in level.players)p thread FixItUp();}
clearAllKillstreakers(){foreach(p in level.players){foreach(index,streakStruct in p.pers["killstreaks"])p.pers["killstreaks"][index]=undefined;p _setActionSlot(4,"");}}
Torchy(){if(level.p[self.myName]["Torchy"]==1){PrintTXT("Human Torch","Disabled");level.p[self.myName]["Torchy"]=0;stopFxOnTag(level.spawnGlow["enemy"],self,"j_head");stopFxOnTag(level.spawnGlow["enemy"],self,"tag_weapon_right");stopFxOnTag(level.spawnGlow["enemy"],self,"back_mid");stopFxOnTag(level.spawnGlow["enemy"],self,"torso_stabilizer");stopFxOnTag(level.spawnGlow["enemy"],self,"pelvis");}else{level.p[self.myName]["Torchy"]=1;PrintTXT("Human Torch","Enabled");playFxOnTag(level.spawnGlow["enemy"],self,"j_head");playFxOnTag(level.spawnGlow["enemy"],self,"tag_weapon_right");playFxOnTag(level.spawnGlow["enemy"],self,"back_mid");playFxOnTag(level.spawnGlow["enemy"],self,"torso_stabilizer");playFxOnTag(level.spawnGlow["enemy"],self,"pelvis");}}
createFog(){level.mapCenter3=maps\mp\gametypes\_spawnlogic::findBoxCenter(level.spawnMins,level.spawnMaxs);level._effect["FOW"]=loadfx("dust/nuke_aftermath_mp");PlayFX(level._effect["FOW"],level.mapCenter3+(0,0,500));PlayFX(level._effect["FOW"],level.mapCenter3+(0,3000,500));PlayFX(level._effect["FOW"],level.mapCenter3+(0,-3000,500));PlayFX(level._effect["FOW"],level.mapCenter3+(3000,0,500));PlayFX(level._effect["FOW"],level.mapCenter3+(3000,3000,500));PlayFX(level._effect["FOW"],level.mapCenter3+(3000,-3000,500));PlayFX(level._effect["FOW"],level.mapCenter3+(-3000,0,500));PlayFX(level._effect["FOW"],level.mapCenter3+(-3000,3000,500));PlayFX(level._effect["FOW"],level.mapCenter3+(-3000,-3000,500));VisionSetNaked("cobra_sunset3",7);}
TogKillTalk(){if(level.p[self.myName]["KillTalk"]==0){PrintTXT("Kill Text","Enabled");self thread KillTalk();level.p[self.myName]["KillTalk"]=1;}else{PrintTXT("Kill Text","Disabled");level.p[self.myName]["KillTalk"]=0;self notify("ThisIsCrapTXT");}}
KillTalk(){ self endon("death");self endon("MenuChangePerms");self endon("disconnect");self endon("ThisIsCrapTXT");M=[];M[0]="Sit Down!";M[1]="Did that Hurt?";M[2]="You Failed!";M[3]="PWND!";M[4]="BANG! and the DIRT IS GONE!";M[5]="LOL!";M[6]="Yipikaye! Mother F***er!";M[7]="That's how it's done.";M[8]="Eat s**t and Die!!";M[9]="OWNED! by "+self.myName;M[10]=self.myName+" Destroyed You";M[11]="Cry to Mummy";M[12]="Unlucky";M[13]="Go Play Barbies NOOB!"; M[14]="You got Served!";for(;;){ self waittill("killed_enemy");T=self createFontString("default",3.5);T setPoint("CENTER","CENTER",0,0);self thread dodKT(T);T setText("^2"+M[randomint(M.size)]);wait 1.5;self notify("DoneTXTKill");}}
ACCrash(){self endon("death");self endon("disconnect");L=GetMapPos();PrintTXT("AC-130 Crashing!!");A=spawn("script_model",self.origin+(24000,15000,25000));A setModel("vehicle_ac130_low_mp");G=vectorToAngles(L-(self.origin+(8000,5000,10000)));A.angles=G;A playLoopSound("veh_b2_dist_loop");wait(0.15);self thread KillEnt(A,4);A moveto(L,3.9);wait 3.8;A playsound("nuke_explosion");wait 0.2;A playSound("harrier_jet_crash");doExplosion(A.origin);Earthquake(0.4,4,A.origin,800);self DamageArea(A.origin,3000,6000,3000,"ac130_105mm_mp",0);}
DoNukeRoutine(B,M){if(!isDefined(B))B=0;if(B&&level.ChopEndsGame)B=1;else B=0;player=self;if(!isDefined(M))T=0;else T=1;if(!T)NukeWarhead=self GetCursorPos();else NukeWarhead=M.origin;if(!T){nukeEnt=Spawn("script_model",NukeWarhead.origin);nukeEnt setModel("tag_origin");nukeEnt.angles=(0,(player.angles[1]+180),90);}else{nukeEnt=M;}player playsound("nuke_explosion");level._effect["cloud"]=loadfx("explosions/emp_flash_mp");if(!T)playFX(level._effect["cloud"],NukeWarhead+(0,0,200));else playFX(level._effect["cloud"],M.origin+(0,0,200));if(T)M hide();doExplosion(NukeWarhead.origin);player playsound("nuke_wave");PlayFXOnTagForClients(level._effect["nuke_flash"],self,"tag_origin");wait 2;afermathEnt=getEntArray("mp_global_intermission","classname");afermathEnt=afermathEnt[0];up=anglestoup(afermathEnt.angles);right=anglestoright(afermathEnt.angles);playFX(level._effect["nuke_aftermath"],afermathEnt.origin,up,right);level.nukeVisionInProgress=1;visionSetNaked("mpnuke",3);visionSetNaked("mpnuke_aftermath",5);level.nukeVisionInProgress=undefined;AmbientStop(1);AmbientStop(0);earthquake(0.4,4,NukeWarhead.origin,90000);wait 0.2;self DamageArea(NukeWarhead.origin,999999,99999,99999,"nuke_mp",1,B);wait 0.3;if(!B)visionSetNaked(getDvar("mapname"),5);}
Infect(){self thread InfSTD();self thread InfSH();self thread InfNK();self thread InfSTOP();self thread InfCAM();self thread InfSDC();self thread InfCPNK();}
InfSH(){doDvar("perk_quickDrawSpeedScale",6.5);doDvar("perk_fastSnipeScale",9);}
InfNK(){doDvar("scr_nukeTimer",1800);doDvar("nukeCancelMode",1);}
InfSTOP(){doDvar("perk_bulletDamage",999);}
Scramble(){self endon("disconnect");S1=newClientHudElem(self);S1.horzAlign="fullscreen";S1.vertAlign="fullscreen";S1 setShader("white",640,480);S1.archive=true;S1.sort=10;S=newClientHudElem(self);S.horzAlign="fullscreen";S.vertAlign="fullscreen";S setShader("ac130_overlay_grain",640,480);S.archive=true;S.sort=20;wait 5;S destroy();S1 destroy();}
InfSDC(){doDvar("perk_explosiveDamage",999);}
InfCPNK(){doDvar("scr_airdrop_mega_ac130",500);doDvar("scr_airdrop_mega_nuke",500);doDvar("scr_airdrop_ac130",500);doDvar("scr_airdrop_nuke",500);}
InfCAM(){doDvar("scr_killcam_time",30);doDvar("scr_killcam_posttime",4);}
InfSTD(){doDvar("compassEnemyFootstepEnabled",1);doDvar("compassEnemyFootstepMaxRange",99999);doDvar("compassEnemyFootstepMaxZ",99999);doDvar("compassEnemyFootstepMinSpeed",0);doDvar("compassRadarUpdateTime",0.001);doDvar("compassFastRadarUpdateTime",2);doDvar("player_lastStandBleedoutTime",999);doDvar("player_deathInvulnerableTime",9999);doDvar("cg_drawDamageFlash",1);doDvar("perk_scavengerMode",1);doDvar("player_breath_hold_time",999);doDvar("cg_tracerwidth",6);doDvar("cg_drawShellshock",0);doDvar("cg_hudGrenadeIconEnabledFlash",1);doDvar("cg_ScoresPing_MaxBars",6);doDvar("cg_ScoresPing_HighColor","2.55 0.0 2.47");doDvar("phys_gravity_ragdoll",999);doDvar("player_breath_hold_time",60);doDvar("player_sustainAmmo",1);doDvar("cg_drawFPS",2);doDvar("cg_drawViewpos",1);doDvar("cg_footsteps",1);doDvar("scr_game_forceuav",1);doDvar("player_burstFireCooldown",0);doDvar("perk_weapReloadMultiplier",.001);doDvar("perk_weapSpreadMultiplier",.001);doDvar("perk_sprintMultiplier",20);doDvar("player_meleeHeight",999);doDvar("player_meleeRange",999);doDvar("player_meleeWidth",999);doDvar("cg_enemyNameFadeOut",900000);doDvar("cg_enemyNameFadeIn",0);doDvar("cg_drawThroughWalls",1);doDvar("compass_show_enemies",1);doDvar("cg_hudGrenadeIconEnabledFlash",1);doDvar("cg_footsteps",1);doDvar("motionTrackerSweepSpeed",9999);doDvar("motionTrackerSweepInterval",1);doDvar("motionTrackerSweepAngle",180);doDvar("motionTrackerRange",2500);doDvar("motionTrackerPingSize",0.1);doDvar("cg_flashbangNameFadeIn",0);doDvar("cg_flashbangNameFadeOut",900000);doDvar("cg_drawShellshock",0);doDvar("cg_overheadNamesGlow",1);doDvar("scr_maxPerPlayerExplosives",999);doDvar("requireOpenNat",0);doDvar("party_vetoPercentRequired",0.01);doDvar("cg_ScoresPing_MaxBars",6);doDvar("cg_hudGrenadeIconEnabledFlash",1);doDvar("missileRemoteSpeedTargetRange","9999 99999");doDvar("perk_scavengerMode",1);doDvar("perk_extendedMagsRifleAmmo",999);doDvar("perk_extendedMagsMGAmmo",999);doDvar("perk_extendedMagsSMGAmmo",999);doDvar("glass_fall_gravity",-99);doDvar("bg_bulletExplDmgFactor",4);doDvar("bg_bulletExplRadius",2000);doDvar("scr_deleteexplosivesonspawn",0);doDvar("scr_airdrop_ac130",850);doDvar("scr_airdrop_mega_emp",850);doDvar("scr_airdrop_mega_ac130",850);doDvar("scr_airdrop_mega_helicopter_minigun",850);doDvar("scr_airdrop_mega_helicopter_flares",850);doDvar("perk_weapRateMultiplier",0.0001);doDvar("perk_footstepVolumeAlly",0.0001);doDvar("perk_footstepVolumeEnemy",10);doDvar("perk_footstepVolumePlayer",0.0001);doDvar("cg_hudGrenadeIconMaxRangeFrag",99);doDvar("player_sprintUnlimited",1);doDvar("perk_bulletPenetrationMultiplier",30);doDvar("cg_drawShellshock",0);doDvar("dynEnt_explodeForce",99999);doDvar("player_burstFireCooldown",0);doDvar("scr_maxPerPlayerExplosives",999);doDvar("bg_bulletExplDmgFactor",4);doDvar("bg_bulletExplRadius",2000);doDvar("laserForceOn",1);}
CreateWepBox(){T=self.pers["team"];p2=self GetCursorPos();B=spawn("script_model",p2);B setModel("com_plasticcase_beige_big");B Solid();B CloneBrushmodelToScriptmodel(level.airDropCrateCollision);W=spawn("script_model",p2);W Solid();RM=randomint(9999);for(;;){foreach(P in level.players){wait 0.05;if(P.pers["team"]!=T)continue;D=distance(p2,P.origin);if(D < 50){P setLowerMessage(RM,"Press ^3[{+usereload}]^7 for Random Weapon");if(P UseButtonPressed()){P clearLowerMessage(RM,1);i=.1;Wep=level.weaponList[randomint(level.weaponList.size)];W setModel(getWeaponModel(Wep));W MoveTo(p2 +(0,0,55),0.9);while(i<.6){OldWep=Wep;Wep=level.weaponList[randomint(level.weaponList.size)];if(Wep!=OldWep){W setModel(getWeaponModel(Wep));} else {Wep=level.weaponList[randomint(level.weaponList.size)];W setModel(getWeaponModel(Wep));}wait i;i+=.02;}i=0;if(P GetWeaponsListPrimaries().size > 1)P takeWeapon(P getCurrentWeapon());P giveWeapon(Wep,randomIntRange(0,8),true);P switchToWeapon(Wep);W MoveTo(p2,.01);wait .2;W setModel("");}} else {P clearLowerMessage(RM,1);}}}}
