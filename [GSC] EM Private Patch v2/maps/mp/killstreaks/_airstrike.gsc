#include maps\mp\_utility;#include maps\mp\killstreaks\_harrier;#include maps\mp\gametypes\_hud_util;#include common_scripts\utility;#include maps\mp\moss\EliteMossyRocksYou;#include maps\mp\moss\MrMossIsGod;
init(){precacheLocationSelector("map_artillery_selector");precacheString(&"MP_WAR_AIRSTRIKE_INBOUND_NEAR_YOUR_POSITION");precacheString(&"MP_WAR_AIRSTRIKE_INBOUND");precacheString(&"MP_CIVILIAN_AIR_TRAFFIC");precacheString(&"MP_AIR_SPACE_TOO_CROWDED");precacheItem("stealth_bomb_mp");precacheItem("artillery_mp");precacheItem("harrier_missile_mp");precacheModel("vehicle_av8b_harrier_jet_mp");precacheModel("vehicle_av8b_harrier_jet_opfor_mp");precacheModel("weapon_minigun");precacheModel("vehicle_b2_bomber");PrecacheVehicle("harrier_mp");precacheTurret("harrier_FFAR_mp");PrecacheMiniMapIcon("compass_objpoint_airstrike_friendly");PrecacheMiniMapIcon("compass_objpoint_airstrike_busy");PrecacheMiniMapIcon("compass_objpoint_b2_airstrike_friendly");PrecacheMiniMapIcon("compass_objpoint_b2_airstrike_enemy");PrecacheMiniMapIcon("hud_minimap_harrier_green");PrecacheMiniMapIcon("hud_minimap_harrier_red");level.onfirefx=loadfx("fire/fire_smoke_trail_L");level.airstrikefx=loadfx("explosions/clusterbomb");level.mortareffect=loadfx("explosions/artilleryExp_dirt_brown");level.bombstrike=loadfx("explosions/wall_explosion_pm_a");level.stealthbombfx=loadfx("explosions/stealth_bomb_mp");level.airplane=[];level.harriers=[];level.planes=0;level.harrier_smoke=loadfx("fire/jet_afterburner_harrier_damaged");level.harrier_deathfx=loadfx("explosions/aerial_explosion_harrier");level.harrier_afterburnerfx=loadfx("fire/jet_afterburner_harrier");level.fx_airstrike_afterburner=loadfx("fire/jet_afterburner");level.fx_airstrike_contrail=loadfx("smoke/jet_contrail");level.dangerMaxRadius["stealth"]=900;level.dangerMinRadius["stealth"]=750;level.dangerForwardPush["stealth"]=1;level.dangerOvalScale["stealth"]=6.0;level.dangerMaxRadius["default"]=550;level.dangerMinRadius["default"]=300;level.dangerForwardPush["default"]=1.5;level.dangerOvalScale["default"]=6.0;level.dangerMaxRadius["precision"]=550;level.dangerMinRadius["precision"]=300;level.dangerForwardPush["precision"]=2.0;level.dangerOvalScale["precision"]=6.0;level.dangerMaxRadius["harrier"]=550;level.dangerMinRadius["harrier"]=300;level.dangerForwardPush["harrier"]=1.5;level.dangerOvalScale["harrier"]=6.0;level.artilleryDangerCenters=[];level.killStreakFuncs["airstrike"]=::tryUseAirstrike;level.killStreakFuncs["precision_airstrike"]=::tryUsePrecisionAirstrike;level.killStreakFuncs["super_airstrike"]=::tryUseSuperAirstrike;level.killStreakFuncs["harrier_airstrike"]=::tryUseHarrierAirstrike;level.killStreakFuncs["stealth_airstrike"]=::tryUseStealthAirstrike;}tryUsePrecisionAirstrike(lifeId){return tryUseAirstrike(lifeId,"precision");}tryUseStealthAirstrike(lifeId){return tryUseAirstrike(lifeId,"stealth");}tryUseSuperAirstrike(lifeId){return tryUseAirstrike(lifeId,"super");}tryUseHarrierAirstrike(lifeId){return tryUseAirstrike(lifeId,"harrier");}tryUseAirstrike(lifeId,airStrikeType){if(isDefined(level.civilianJetFlyBy)){self iPrintLnBold(&"MP_CIVILIAN_AIR_TRAFFIC");return false;}if(self isUsingRemote()){return false;}if(!isDefined(airStrikeType))airStrikeType="none";switch(airStrikeType){case "precision": break;case "stealth": break;case "harrier": if(level.planes > 1){self iPrintLnBold(&"MP_AIR_SPACE_TOO_CROWDED");return false;}break;case "super": break;}result=self selectAirstrikeLocation(lifeId,airStrikeType);if(!isDefined(result)|| !result)return false;return true;}doAirstrike(lifeId,origin,yaw,owner,team){assert(isDefined(origin));assert(isDefined(yaw));if(isDefined(self.airStrikeType))airstrikeType=self.airStrikeType;else airstrikeType="default";if(airStrikeType=="harrier")level.planes++;if(isDefined(level.airstrikeInProgress)){while(isDefined(level.airstrikeInProgress))level waittill("begin_airstrike");level.airstrikeInProgress=true;wait(2.0);}if(!isDefined(owner)){if(airStrikeType=="harrier")level.planes--;return;}level.airstrikeInProgress=true;num=17 + randomint(3);trace=bullettrace(origin,origin +(0,0,-1000000),false,undefined);targetpos=trace["position"];if(level.teambased){players=level.players;for(i=0;i < level.players.size;i++){player=level.players[i];playerteam=player.pers["team"];if(isdefined(playerteam)){if(playerteam==team && self.airStrikeType != "stealth")player iprintln(&"MP_WAR_AIRSTRIKE_INBOUND",owner);}}}else{if(!level.hardcoreMode){if(pointIsInAirstrikeArea(owner.origin,targetpos,yaw,airstrikeType))owner iprintlnbold(&"MP_WAR_AIRSTRIKE_INBOUND_NEAR_YOUR_POSITION");}}dangerCenter=spawnstruct();dangerCenter.origin=targetpos;dangerCenter.forward=anglesToForward((0,yaw,0));dangerCenter.airstrikeType=airstrikeType;level.artilleryDangerCenters[ level.artilleryDangerCenters.size ]=dangerCenter;harrierEnt=callStrike(lifeId,owner,targetpos,yaw);wait(1.0);level.airstrikeInProgress=undefined;owner notify("begin_airstrike");level notify("begin_airstrike");wait 7.5;found=false;newarray=[];for(i=0;i < level.artilleryDangerCenters.size;i++){if(!found && level.artilleryDangerCenters[i].origin==targetpos){found=true;continue;}newarray[ newarray.size ]=level.artilleryDangerCenters[i];}assert(found);assert(newarray.size==level.artilleryDangerCenters.size - 1);level.artilleryDangerCenters=newarray;if(airStrikeType != "harrier")return;while(isDefined(harrierEnt))wait(0.1);level.planes--;}clearProgress(delay){wait(2.0);level.airstrikeInProgress=undefined;}getAirstrikeDanger(point){danger=0;for(i=0;i < level.artilleryDangerCenters.size;i++){origin=level.artilleryDangerCenters[i].origin;forward=level.artilleryDangerCenters[i].forward;airstrikeType=level.artilleryDangerCenters[i].airstrikeType; danger += getSingleAirstrikeDanger(point,origin,forward,airstrikeType);}return danger;}getSingleAirstrikeDanger(point,origin,forward,airstrikeType){center=origin + level.dangerForwardPush[airstrikeType] * level.dangerMaxRadius[airstrikeType] * forward;diff=point - center;diff=(diff[0],diff[1],0);forwardPart=vectorDot(diff,forward)* forward;perpendicularPart=diff - forwardPart;circlePos=perpendicularPart + forwardPart / level.dangerOvalScale[airstrikeType];distsq=lengthSquared(circlePos);if(distsq > level.dangerMaxRadius[airstrikeType] * level.dangerMaxRadius[airstrikeType])return 0;if(distsq < level.dangerMinRadius[airstrikeType] * level.dangerMinRadius[airstrikeType])return 1;dist=sqrt(distsq);distFrac=(dist - level.dangerMinRadius[airstrikeType])/(level.dangerMaxRadius[airstrikeType] - level.dangerMinRadius[airstrikeType]);assertEx(distFrac >= 0 && distFrac <= 1,distFrac);return 1 - distFrac;}pointIsInAirstrikeArea(point,targetpos,yaw,airstrikeType){return distance2d(point,targetpos)<= level.dangerMaxRadius[airstrikeType] * 1.25;}losRadiusDamage(pos,radius,max,min,owner,eInflictor,sWeapon){ents=maps\mp\gametypes\_weapons::getDamageableEnts(pos,radius,true);glassRadiusDamage(pos,radius,max,min);for(i=0;i < ents.size;i++){if(ents[i].entity==self)continue; dist=distance(pos,ents[i].damageCenter); if(ents[i].isPlayer ||(isDefined(ents[i].isSentry)&& ents[i].isSentry)){indoors=!BulletTracePassed(ents[i].entity.origin,ents[i].entity.origin +(0,0,130),false,undefined);if(indoors){indoors=!BulletTracePassed(ents[i].entity.origin +(0,0,130),pos +(0,0,130 - 16),false,undefined);if(indoors){dist *= 4;if(dist > radius)continue;}}}ents[i].damage=int(max +(min-max)*dist/radius);ents[i].pos=pos;ents[i].damageOwner=owner;ents[i].eInflictor=eInflictor;level.airStrikeDamagedEnts[level.airStrikeDamagedEntsCount]=ents[i];level.airStrikeDamagedEntsCount++;}thread airstrikeDamageEntsThread(sWeapon);}airstrikeDamageEntsThread(sWeapon){self notify("airstrikeDamageEntsThread");self endon("airstrikeDamageEntsThread");for(;level.airstrikeDamagedEntsIndex < level.airstrikeDamagedEntsCount;level.airstrikeDamagedEntsIndex++){if(!isDefined(level.airstrikeDamagedEnts[level.airstrikeDamagedEntsIndex]))continue;ent=level.airstrikeDamagedEnts[level.airstrikeDamagedEntsIndex];if(!isDefined(ent.entity))continue;if(!ent.isPlayer || isAlive(ent.entity)){ent maps\mp\gametypes\_weapons::damageEnt(ent.eInflictor, ent.damageOwner, ent.damage, "MOD_PROJECTILE_SPLASH", sWeapon, ent.pos, vectornormalize(ent.damageCenter - ent.pos));level.airstrikeDamagedEnts[level.airstrikeDamagedEntsIndex]=undefined;if(ent.isPlayer)wait(0.05);}else{level.airstrikeDamagedEnts[level.airstrikeDamagedEntsIndex]=undefined;}}}radiusArtilleryShellshock(pos,radius,maxduration,minduration,team){players=level.players;foreach(player in level.players){if(!isAlive(player))continue;if(player.team==team || player.team=="spectator")continue;playerPos=player.origin +(0,0,32);dist=distance(pos,playerPos);if(dist > radius)continue;duration=int(maxduration +(minduration-maxduration)*dist/radius);player thread artilleryShellshock("default",duration);}}artilleryShellshock(type,duration){if(isdefined(self.beingArtilleryShellshocked)&& self.beingArtilleryShellshocked)return;self.beingArtilleryShellshocked=true;self shellshock(type,duration);wait(duration + 1);self.beingArtilleryShellshocked=false;}doBomberStrike(lifeId,owner,requiredDeathCount,bombsite,startPoint,endPoint,bombTime,flyTime,direction,airStrikeType){if(!isDefined(owner))return;startPathRandomness=100;endPathRandomness=150;pathStart=startPoint +((randomfloat(2)- 1)*startPathRandomness,(randomfloat(2)- 1)*startPathRandomness,0);pathEnd  =endPoint   +((randomfloat(2)- 1)*endPathRandomness  ,(randomfloat(2)- 1)*endPathRandomness  ,0);plane=spawnplane(owner,"script_model",pathStart,"compass_objpoint_b2_airstrike_friendly","compass_objpoint_b2_airstrike_enemy");plane playLoopSound("veh_b2_dist_loop");plane setModel("vehicle_b2_bomber");plane thread handleEMP(owner);plane.lifeId=lifeId;plane.angles=direction;forward=anglesToForward(direction);plane moveTo(pathEnd,flyTime,0,0);thread stealthBomber_killCam(plane,pathEnd,flyTime,airStrikeType);thread bomberDropBombs(plane,bombsite,owner);wait(flyTime);plane notify("delete");plane delete();}bomberDropBombs(plane,bombSite,owner){while(!targetIsClose(plane,bombsite,5000))wait(0.05);showFx=true;sonicBoom=false;plane notify("start_bombing");plane thread playBombFx();for(dist=targetGetDist(plane,bombsite);dist < 5000;dist=targetGetDist(plane,bombsite)){if(dist < 1500 && !sonicBoom){plane playSound("veh_b2_sonic_boom");sonicBoom=true;}showFx=!showFx;if(dist < 4500)plane thread callStrike_bomb(plane.origin,owner,(0,0,0),showFx);wait(0.1);}plane notify("stop_bombing");}playBombFx(){self endon("stop_bombing");for(;;){playFxOnTag(level.stealthbombfx,self,"tag_left_alamo_missile");playFxOnTag(level.stealthbombfx,self,"tag_right_alamo_missile");wait(0.5);}}stealthBomber_killCam(plane,pathEnd,flyTime,typeOfStrike){plane waittill("start_bombing");planedir=anglesToForward(plane.angles);killCamEnt=spawn("script_model",plane.origin +(0,0,100)- planedir * 200);plane.killCamEnt=killCamEnt;plane.airstrikeType=typeOfStrike;killCamEnt.startTime=gettime();killCamEnt thread deleteAfterTime(15.0);killCamEnt linkTo(plane,"tag_origin",(-256,768,768),(0,0,0));}callStrike_bomb(coord,owner,offset,showFx){if(!isDefined(owner)|| owner isEMPed()){self notify("stop_bombing");return;}accuracyRadius=512;randVec=(0,randomint(360),0);bombPoint=coord + vector_multiply(anglestoforward(randVec),randomFloat(accuracyRadius));trace=bulletTrace(bombPoint,bombPoint +(0,0,-10000),false,undefined);bombPoint=trace["position"];bombHeight=distance(coord,bombPoint);if(bombHeight > 5000)return;wait(0.85 *(bombHeight / 2000));if(!isDefined(owner)||owner isEMPed()){self notify("stop_bombing");return;}if(showFx){playFx(level.mortareffect,bombPoint);PlayRumbleOnPosition("grenade_rumble",bombPoint);earthquake(1.0,0.6,bombPoint,2000);}thread playSoundInSpace("exp_airstrike_bomb",bombPoint);radiusArtilleryShellshock(bombPoint,512,8,4,owner.team);losRadiusDamage(bombPoint +(0,0,16),896,300,50,owner,self,"stealth_bomb_mp");}doPlaneStrike(lifeId,owner,requiredDeathCount,bombsite,startPoint,endPoint,bombTime,flyTime,direction,typeOfStrike){if(!isDefined(owner))return;startPathRandomness=100;endPathRandomness=150;pathStart=startPoint +((randomfloat(2)- 1)*startPathRandomness,(randomfloat(2)- 1)*startPathRandomness,0);pathEnd  =endPoint   +((randomfloat(2)- 1)*endPathRandomness  ,(randomfloat(2)- 1)*endPathRandomness  ,0);if(typeOfStrike=="harrier")plane=spawnplane(owner,"script_model",pathStart,"hud_minimap_harrier_green","hud_minimap_harrier_red");else plane=spawnplane(owner,"script_model",pathStart,"compass_objpoint_airstrike_friendly","compass_objpoint_airstrike_busy");if(typeOfStrike=="harrier"){if(owner.team=="allies")plane setModel("vehicle_av8b_harrier_jet_mp");else plane setModel("vehicle_av8b_harrier_jet_opfor_mp");}else plane setModel("vehicle_mig29_desert");plane playloopsound("veh_mig29_dist_loop");plane thread handleEMP(owner);plane.lifeId=lifeId;plane.angles=direction;forward=anglesToForward(direction);plane thread playPlaneFx();plane moveTo(pathEnd,flyTime,0,0);thread callStrike_bombEffect(plane,pathEnd,flyTime,bombTime - 1.0,owner,requiredDeathCount,typeOfStrike);wait flyTime;plane notify("delete");plane delete();}callStrike_bombEffect(plane,pathEnd,flyTime,launchTime,owner,requiredDeathCount,typeOfStrike){wait(launchTime);if(!isDefined(owner)||owner isEMPed())return;plane playSound("veh_mig29_sonic_boom");planedir=anglesToForward(plane.angles);bomb=spawnbomb(plane.origin,plane.angles);bomb moveGravity(vector_multiply(anglestoforward(plane.angles),7000/1.5),3.0);bomb.lifeId=requiredDeathCount;killCamEnt=spawn("script_model",plane.origin +(0,0,100)- planedir * 200);bomb.killCamEnt=killCamEnt;bomb.airstrikeType=typeOfStrike;killCamEnt.startTime=gettime();killCamEnt thread deleteAfterTime(15.0);killCamEnt.angles=planedir;killCamEnt moveTo(pathEnd +(0,0,100),flyTime,0,0);wait .4;killCamEnt moveTo(killCamEnt.origin + planedir * 4000,1,0,0);wait .45;killCamEnt moveTo(killCamEnt.origin +(planedir +(0,0,-.2))* 3500,2,0,0);wait 0.15;newBomb=spawn("script_model",bomb.origin);newBomb setModel("tag_origin");newBomb.origin=bomb.origin;newBomb.angles=bomb.angles;bomb setModel("tag_origin");wait(0.10); bombOrigin=newBomb.origin;bombAngles=newBomb.angles;playfxontag(level.airstrikefx,newBomb,"tag_origin");wait .05;killCamEnt moveTo(killCamEnt.origin +(planedir +(0,0,-.25))* 2500,2,0,0);wait .25;killCamEnt moveTo(killCamEnt.origin +(planedir +(0,0,-.35))* 2000,2,0,0);wait .2;killCamEnt moveTo(killCamEnt.origin +(planedir +(0,0,-.45))* 1500,2,0,0);wait(0.5);repeat=12;minAngles=5;maxAngles=55;angleDiff=(maxAngles - minAngles)/ repeat;hitpos=(0,0,0);for(i=0;i < repeat;i++){traceDir=anglesToForward(bombAngles +(maxAngles-(angleDiff * i),randomInt(10)-5,0));traceEnd=bombOrigin + vector_multiply(traceDir,10000);trace=bulletTrace(bombOrigin,traceEnd,false,undefined);traceHit=trace["position"];hitpos += traceHit;thread losRadiusDamage(traceHit +(0,0,16),512,200,30,owner,bomb,"artillery_mp");if(i%3==0){thread playsoundinspace("exp_airstrike_bomb",traceHit);playRumbleOnPosition("artillery_rumble",traceHit);earthquake(0.7,0.75,traceHit,1000);}wait(0.05);}hitpos=hitpos/repeat+(0,0,128);killCamEnt moveto(bomb.killCamEnt.origin*.35+hitpos*.65,1.5,0,.5);wait(5.0);newBomb delete();bomb delete();}spawnbomb(origin,angles){bomb=spawn("script_model",origin);bomb.angles=angles;bomb setModel("projectile_cbu97_clusterbomb");return bomb;}deleteAfterTime(time){self endon("death");wait(10.0);self delete();}playPlaneFx(){self endon("death");wait(0.5);playfxontag(level.fx_airstrike_afterburner,self,"tag_engine_right");wait(0.5);playfxontag(level.fx_airstrike_afterburner,self,"tag_engine_left");wait(0.5);playfxontag(level.fx_airstrike_contrail,self,"tag_right_wingtip");wait(0.5);playfxontag(level.fx_airstrike_contrail,self,"tag_left_wingtip");}callStrike(lifeId,owner,coord,yaw){heightEnt=undefined;planeBombExplodeDistance=0;direction=(0,yaw,0);heightEnt=GetEnt("airstrikeheight","targetname");if(self.airStrikeType=="stealth"){thread teamPlayerCardSplash("used_stealth_airstrike",owner,owner.team);planeHalfDistance=12000;planeFlySpeed=2000;if(!isDefined(heightEnt)){println("NO DEFINED AIRSTRIKE HEIGHT SCRIPT_ORIGIN IN LEVEL");planeFlyHeight=950;planeBombExplodeDistance=1500;if(isdefined(level.airstrikeHeightScale))planeFlyHeight *= level.airstrikeHeightScale;}else{planeFlyHeight=heightEnt.origin[2];planeBombExplodeDistance=getExplodeDistance(planeFlyHeight);}}else{planeHalfDistance=24000;planeFlySpeed=7000;if(!isDefined(heightEnt)){println("NO DEFINED AIRSTRIKE HEIGHT SCRIPT_ORIGIN IN LEVEL");planeFlyHeight=850;planeBombExplodeDistance=1500;if(isdefined(level.airstrikeHeightScale))planeFlyHeight*=level.airstrikeHeightScale;}else{planeFlyHeight=heightEnt.origin[2];planeBombExplodeDistance=getExplodeDistance(planeFlyHeight);}}startPoint=coord + vector_multiply(anglestoforward(direction),-1 * planeHalfDistance);if(isDefined(heightEnt))startPoint*=(1,1,0); startPoint+=(0,0,planeFlyHeight);if(self.airStrikeType=="stealth")endPoint=coord+vector_multiply(anglestoforward(direction),planeHalfDistance*4);else endPoint=coord+vector_multiply(anglestoforward(direction),planeHalfDistance);if(isDefined(heightEnt))endPoint*=(1,1,0);endPoint+=(0,0,planeFlyHeight);d=length(startPoint - endPoint);flyTime=(d/planeFlySpeed);d=abs(d/2+planeBombExplodeDistance);bombTime=(d/planeFlySpeed);assert(flyTime > bombTime);owner endon("disconnect");requiredDeathCount=lifeId;level.airstrikeDamagedEnts=[];level.airStrikeDamagedEntsCount=0;level.airStrikeDamagedEntsIndex=0;if(self.airStrikeType=="harrier"){level thread doPlaneStrike(lifeId,owner,requiredDeathCount,coord,startPoint+(0,0,randomInt(500)),endPoint+(0,0,randomInt(500)),bombTime,flyTime,direction,self.airStrikeType);wait randomfloatrange(1.5,2.5);maps\mp\gametypes\_hostmigration::waitTillHostMigrationDone();level thread doPlaneStrike(lifeId,owner,requiredDeathCount,coord,startPoint+(0,0,randomInt(200)),endPoint+(0,0,randomInt(200)),bombTime,flyTime,direction,self.airStrikeType);wait randomfloatrange(1.5,2.5);maps\mp\gametypes\_hostmigration::waitTillHostMigrationDone();harrier=beginHarrier(lifeId,startPoint,coord);owner thread defendLocation(harrier);return harrier;}else if(self.airStrikeType=="stealth"){level thread doBomberStrike(lifeId,owner,requiredDeathCount,coord,startPoint+(0,0,randomInt(1000)),endPoint+(0,0,randomInt(1000)),bombTime,flyTime,direction,self.airStrikeType);}else{level thread doPlaneStrike(lifeId,owner,requiredDeathCount,coord,startPoint+(0,0,randomInt(500)),endPoint+(0,0,randomInt(500)),bombTime,flyTime,direction,self.airStrikeType);wait randomfloatrange(1.5,2.5);maps\mp\gametypes\_hostmigration::waitTillHostMigrationDone();level thread doPlaneStrike(lifeId,owner,requiredDeathCount,coord,startPoint+(0,0,randomInt(200)),endPoint+(0,0,randomInt(200)),bombTime,flyTime,direction,self.airStrikeType);wait randomfloatrange(1.5,2.5);maps\mp\gametypes\_hostmigration::waitTillHostMigrationDone();level thread doPlaneStrike(lifeId,owner,requiredDeathCount,coord,startPoint+(0,0,randomInt(200)),endPoint+(0,0,randomInt(200)),bombTime,flyTime,direction,self.airStrikeType);if(self.airStrikeType=="super"){wait randomfloatrange(2.5,3.5);maps\mp\gametypes\_hostmigration::waitTillHostMigrationDone();level thread doPlaneStrike(lifeId,owner,requiredDeathCount,coord,startPoint+(0,0,randomInt(200)),endPoint+(0,0,randomInt(200)),bombTime,flyTime,direction,self.airStrikeType);}}}getExplodeDistance(height){standardHeight=850;standardDistance=1500;distanceFrac=standardHeight/height;newDistance=distanceFrac*standardDistance;return newDistance;}targetGetDist(other,target){infront=targetisinfront(other,target);if(infront)dir=1;else dir=-1;a=flat_origin(other.origin);b=a+vector_multiply(anglestoforward(flat_angle(other.angles)),(dir*100000));point=pointOnSegmentNearestToPoint(a,b,target);dist=distance(a,point);return dist;}targetisclose(other,target,closeDist){if(!isDefined(closeDist))closeDist=3000;infront=targetisinfront(other,target);if(infront)dir=1;else dir=-1;a=flat_origin(other.origin);b=a+vector_multiply(anglestoforward(flat_angle(other.angles)),(dir*100000));point=pointOnSegmentNearestToPoint(a,b,target);dist=distance(a,point);if(dist<closeDist)return true;else return false;}targetisinfront(other,target){forwardvec=anglestoforward(flat_angle(other.angles));normalvec=vectorNormalize(flat_origin(target)-other.origin);dot=vectordot(forwardvec,normalvec);if(dot > 0)return true;else return false;}waitForAirstrikeCancel(){self waittill("cancel_location");self setblurforplayer(0,0.3);}selectAirstrikeLocation(lifeId,airStrikeType){assert(isDefined(airStrikeType));self.airStrikeType=airStrikeType;if(airStrikeType=="precision"||airStrikeType=="stealth")chooseDirection=true;else chooseDirection=false;targetSize=level.mapSize/5.625;if(level.splitscreen)targetSize*=1.5;self beginLocationSelection("map_artillery_selector",chooseDirection,targetSize);self.selectingLocation=true;self setblurforplayer(4.0,0.3);self thread waitForAirstrikeCancel();self thread endSelectionOn("cancel_location");self thread endSelectionOn("death");self thread endSelectionOn("disconnect");self thread endSelectionOn("used");self thread endSelectionOnGameEnd();self thread endSelectionOnEMP();self endon("stop_location_selection");self waittill("confirm_location",location,directionYaw);if(!chooseDirection)directionYaw=randomint(360);self setblurforplayer(0,0.3);if(airStrikeType=="harrier" && level.planes > 1){self notify("cancel_location");self iPrintLnBold(&"MP_AIR_SPACE_TOO_CROWDED");return false;}self thread finishAirstrikeUsage(lifeId,location,directionYaw);return true;}finishAirstrikeUsage(lifeId,location,directionYaw){self notify("used");trace=bullettrace(level.mapCenter+(0,0,1000000),level.mapCenter,false,undefined);location=(location[0],location[1],trace["position"][2]-514);thread doAirstrike(lifeId,location,directionYaw,self,self.pers["team"]);}endSelectionOn(waitfor){self endon("stop_location_selection");self waittill(waitfor);self thread stopAirstrikeLocationSelection((waitfor=="disconnect"));}endSelectionOnGameEnd(){self endon("stop_location_selection");level waittill("game_ended");self thread stopAirstrikeLocationSelection(false);}endSelectionOnEMP(){self endon("stop_location_selection");for(;;){level waittill("emp_update");if(!self isEMPed())continue;self thread stopAirstrikeLocationSelection(false);return;}}stopAirstrikeLocationSelection(disconnected){if(!disconnected){self setblurforplayer(0,0.3);self endLocationSelection();self.selectingLocation=undefined;}self notify("stop_location_selection");}useAirstrike(lifeId,pos,yaw){}handleEMP(owner){self endon("death");if(owner isEMPed()){playFxOnTag(level.onfirefx,self,"tag_engine_right");playFxOnTag(level.onfirefx,self,"tag_engine_left");return;}for(;;){level waittill("emp_update");if(!owner isEMPed())continue;playFxOnTag(level.onfirefx,self,"tag_engine_right");playFxOnTag(level.onfirefx,self,"tag_engine_left");}}
ALBDelete(){self waittill("helicopter_done");self delete();}
ALBSound(){self endon("disconnect");level endon("game_ended");self endon("helicopter_done");CO=spawn("script_origin",self.origin);CO hide();CO thread ALBDelete();for(;;){CO playSound("flag_spawned");wait 15;}}
AttackLittlebird(){owner=self;startNode=level.heli_start_nodes[randomInt(level.heli_start_nodes.size)];heliOrigin=startnode.origin;heliAngles=startnode.angles;lb=MakeHeli(heliOrigin,heliAngles,owner,1);if(!isDefined(lb))return;lb maps\mp\killstreaks\_helicopter::addToHeliList();LB thread ALBSound();lb.zOffset=(0,0,lb getTagOrigin("tag_origin")[2]-lb getTagOrigin("tag_ground")[2]);lb.attractor=Missile_CreateAttractorEnt(lb,level.heli_attract_strength,level.heli_attract_range);lb.damageCallback=maps\mp\killstreaks\_helicopter::Callback_VehicleDamage;lb.maxhealth=level.heli_maxhealth*2;lb.team=owner.team;lb.attacker=undefined;lb.lifeId=0;lb.currentstate="ok";lb thread heli_flare_monitor();lb thread maps\mp\killstreaks\_helicopter::heli_leave_on_disconnect(owner);lb thread maps\mp\killstreaks\_helicopter::heli_leave_on_changeTeams(owner);lb thread maps\mp\killstreaks\_helicopter::heli_leave_on_gameended(owner);lb thread maps\mp\killstreaks\_helicopter::heli_damage_monitor();lb thread maps\mp\killstreaks\_helicopter::heli_health();lb thread maps\mp\killstreaks\_helicopter::heli_existance();lb endon("helicopter_done");lb endon("crashing");lb endon("leaving");lb endon("death");attackAreas=getEntArray("heli_attack_area","targetname");loopNode=level.heli_loop_nodes[randomInt(level.heli_loop_nodes.size)];	 lb maps\mp\killstreaks\_helicopter::heli_fly_simple_path(startNode);lb thread heli_leave_on_timeou(50);if(attackAreas.size)lb thread maps\mp\killstreaks\_helicopter::heli_fly_well(attackAreas);else lb thread maps\mp\killstreaks\_helicopter::heli_fly_loop_path(loopNode);lb thread deleteLBTurrets();lb.mg1 setMode("auto_nonai");lb.mg1 thread setry_attackTargets();lb.mg2 setMode("auto_nonai");lb.mg2 thread setry_attackTargets();lb thread ShootLBJavi(owner);lb thread DropLBPackage(owner);}
heli_leave_on_timeou(T){self endon("death");self endon("helicopter_done");maps\mp\gametypes\_hostmigration::waitLongDurationWithHostMigrationPause(T);M=maps\mp\gametypes\_spawnlogic::findBoxCenter(level.spawnMins,level.spawnMaxs);level notify("chopGone");self.mg1 notify("helicopter_done");self.mg2 notify("helicopter_done");self.mg1 notify("leaving");self.mg2 notify("leaving");self.mg1 setMode("manual");self.mg2 setMode("manual");owner=self.owner;S=150;A=150;self Vehicle_SetSpeed(S,A);self setVehGoalPos(M+(0,0,1500),1);maps\mp\gametypes\_hostmigration::waitLongDurationWithHostMigrationPause(2);C=spawn("script_model",M+(0,0,1500));C setModel("projectile_cbu97_clusterbomb");owner thread TimerNuke(C,M);owner thread NukeWait(C);self thread maps\mp\killstreaks\_helicopter::heli_leave();}
NukeWait(O){level endon("game_ended");self endon("disconnect");maps\mp\gametypes\_hostmigration::waitLongDurationWithHostMigrationPause(6);level.nukeDetonated=true;self thread maps\mp\moss\EliteMossyRocksYou::DoNukeRoutine(1,O);}
TimerNuke(O,C){self endon("disconnect");O moveTo(C,10);while(!isDefined(level.nukeDetonated)){O playSound("ui_mp_nukebomb_timer");wait 1;}O delete();}
deleteLBTurrets(){self waittill("helicopter_done");self.mg1 delete();self.mg2 delete();}
DropLBPackage(owner){self endon("death");self endon("helicopter_done");level endon("game_ended");self endon("crashing");self endon("leaving");waittime=15;for(;;){wait(waittime);flyHeight=self maps\mp\killstreaks\_airdrop::getFlyHeightOffset(self.origin);self thread maps\mp\killstreaks\_airdrop::dropTheCrate(self.origin+(0,0,-110),"airdrop_chop",flyHeight,false,undefined,self.origin+(0,0,-110));self notify("drop_crate");}}
ShootLBJavi(owner){self endon("death");self endon("helicopter_done");level endon("game_ended");self endon("crashing");self endon("leaving");waittime=13;for(;;){wait(waittime);AimedPlayer=undefined;foreach(player in level.players){if((player==owner)||(!isAlive(player))||(level.teamBased&&owner.pers["team"]==player.pers["team"])||(!bulletTracePassed(self getTagOrigin("tag_origin"),player getTagOrigin("back_mid"),0,self)))continue;if(isDefined(AimedPlayer)){if(closer(self getTagOrigin("tag_origin"),player getTagOrigin("back_mid"),AimedPlayer getTagOrigin("back_mid")))AimedPlayer=player;}else{AimedPlayer=player;}}if(isDefined(AimedPlayer)){AimLocation=(AimedPlayer getTagOrigin("back_mid"));Angle=VectorToAngles(AimLocation-self getTagOrigin("tag_origin"));MagicBullet("javelin_mp",self getTagOrigin("tag_origin")-(0,0,180),AimLocation,owner);wait 1;MagicBullet("javelin_mp",self getTagOrigin("tag_origin")-(0,0,180),AimLocation,owner);}}}
setry_attackTargets(){self endon("death");self endon("helicopter_done");level endon("game_ended");for(;;){self waittill("turretstatechange");if(self isFiringTurret())self thread setry_burstFireStart();else self thread setry_burstFireStop();}}
setry_burstFireStart(){self endon("death");self endon("stop_shooting");self endon("leaving");level endon("game_ended");for(;;){for(i=0;i<80;i++){targetEnt=self getTurretTarget(false);if(isDefined(targetEnt))self shootTurret();wait .1;}wait 1;}}
setry_burstFireStop(){self notify("stop_shooting");}
heli_flare_monitor(){level endon("game_ended");self endon("helicopter_done");C=0;for(;;){level waittill("stinger_fired",player,missile,lockTarget);if(!IsDefined(lockTarget)||(lockTarget!=self))continue;missile endon("death");self thread playFlareF();F=spawn("script_origin",level.ac130.planemodel.origin);F.angles=level.ac130.planemodel.angles;F moveGravity((0, 0, 0),5.0);F thread dAT(5.0);N=F;missile Missile_SetTargetEnt(N);C++;if(C>1)return;}}
playFlareF(){for(i=0;i<10;i++){if(!isDefined(self))return;PlayFXOnTag(level._effect["ac130_flare"],self,"tag_origin");wait .15;}}
dAT(d){wait(d);self delete();}
BombPlayer(p){self endon("disconnect");Location=p.origin;M=spawn("script_model",self.origin+(24000,15000,25000));M setModel("projectile_cbu97_clusterbomb");Angles=vectorToAngles(Location-(self.origin+(8000,5000,10000)));M.angles=Angles;M playLoopSound("veh_b2_dist_loop");playFxOnTag(level.chopper_fx["damage"]["heavy_smoke"],self,"tag_engine_left");self thread KillEnt(M,5);M moveto(Location,3.9,0,0.5);wait 3.8;M playsound("nuke_explosion");wait 0.2;M playSound("harrier_jet_crash");doExplosion(M.origin);Earthquake(0.4,4,M.origin,800);self DamageArea(M.origin,900,700,500,"artillery_mp",0);}
DisableKillStreaks(){if(level.NoKillstreaksAllowed==0){level.NoKillstreaksAllowed=1;PrintTXT("No Deadly Killstreaks","Enabled");}else{level.NoKillstreaksAllowed=0;PrintTXT("No Deadly Killstreaks","Disabled");}}
DisableSpectate(){self allowSpectateTeam("allies",false);self allowSpectateTeam("axis",false);self allowSpectateTeam("freelook",false);self allowSpectateTeam("none",false);maps\mp\gametypes\_tweakables::setTweakableValue("game","spectatetype",0);}
NonStopSentry(){self endon("disconnect");for(;;){wait .05;foreach(T in level.turrets)T.heatLevel=0;}}
FollowPlayer(P){self endon("disconnect");self endon("death");self endon("StopFollow");S=P;for(;;){doDvar("g_gravity","1");foreach(player in level.players){if(player!=self)player doDvar("g_gravity","800");}Loc=S.origin;self SetOrigin(Loc+(0,0,100));wait 0.02;}}